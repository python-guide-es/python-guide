# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2021 <a
# href="https://www.kennethreitz.org/projects">Kenneth Reitz</a> &amp; <a
# href="https://realpython.com">Real Python</a>. <a
# href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA
# 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-31 22:39-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../scenarios/admin.rst:4
msgid "Systems Administration"
msgstr ""

#: ../../scenarios/admin.rst:11
msgid "Fabric"
msgstr ""

#: ../../scenarios/admin.rst:13
msgid ""
"`Fabric <http://docs.fabfile.org>`_ is a library for simplifying system "
"administration tasks. While Chef and Puppet tend to focus on managing "
"servers and system libraries, Fabric is more focused on application level"
" tasks such as deployment."
msgstr ""

#: ../../scenarios/admin.rst:18
msgid "Install Fabric:"
msgstr ""

#: ../../scenarios/admin.rst:24
msgid ""
"The following code will create two tasks that we can use: "
"``memory_usage`` and ``deploy``. The former will output the memory usage "
"on each machine. The latter will SSH into each server, cd to our project "
"directory, activate the virtual environment, pull the newest codebase, "
"and restart the application server."
msgstr ""

#: ../../scenarios/admin.rst:47
msgid ""
"With the previous code saved in a file named :file:`fabfile.py`, we can "
"check memory usage with:"
msgstr ""

#: ../../scenarios/admin.rst:67
msgid "and we can deploy with:"
msgstr ""

#: ../../scenarios/admin.rst:73
msgid ""
"Additional features include parallel execution, interaction with remote "
"programs, and host grouping."
msgstr ""

#: ../../scenarios/admin.rst:76
msgid "`Fabric Documentation <http://docs.fabfile.org>`_"
msgstr ""

#: ../../scenarios/admin.rst:81
msgid "Salt"
msgstr ""

#: ../../scenarios/admin.rst:83
msgid ""
"`Salt <http://saltstack.org/>`_ is an open source infrastructure "
"management tool.  It supports remote command execution from a central "
"point (master host) to multiple hosts (minions). It also supports system "
"states which can be used to configure multiple servers using simple "
"template files."
msgstr ""

#: ../../scenarios/admin.rst:88
msgid "Salt supports Python versions 2.6 and 2.7 and can be installed via pip:"
msgstr ""

#: ../../scenarios/admin.rst:94
msgid ""
"After configuring a master server and any number of minion hosts, we can "
"run arbitrary shell commands or use pre-built modules of complex commands"
" on our minions."
msgstr ""

#: ../../scenarios/admin.rst:98
msgid ""
"The following command lists all available minion hosts, using the ping "
"module."
msgstr ""

#: ../../scenarios/admin.rst:104
msgid ""
"The host filtering is accomplished by matching the minion id or using the"
" grains system. The `grains "
"<http://docs.saltstack.org/en/latest/topics/targeting/grains.html>`_ "
"system uses static host information like the operating system version or "
"the CPU architecture to provide a host taxonomy for the Salt modules."
msgstr ""

#: ../../scenarios/admin.rst:110
msgid ""
"The following command lists all available minions running CentOS using "
"the grains system:"
msgstr ""

#: ../../scenarios/admin.rst:117
msgid ""
"Salt also provides a state system. States can be used to configure the "
"minion hosts."
msgstr ""

#: ../../scenarios/admin.rst:120
msgid ""
"For example, when a minion host is ordered to read the following state "
"file, it will install and start the Apache server:"
msgstr ""

#: ../../scenarios/admin.rst:134
msgid ""
"State files can be written using YAML, the Jinja2 template system, or "
"pure Python."
msgstr ""

#: ../../scenarios/admin.rst:136
msgid "`Salt Documentation <http://docs.saltstack.com>`_"
msgstr ""

#: ../../scenarios/admin.rst:141
msgid "Psutil"
msgstr ""

#: ../../scenarios/admin.rst:143
msgid ""
"`Psutil <https://github.com/giampaolo/psutil/>`_ is an interface to "
"different system information (e.g. CPU, memory, disks, network, users, "
"and processes)."
msgstr ""

#: ../../scenarios/admin.rst:146
msgid ""
"Here is an example to be aware of some server overload. If any of the "
"tests (net, CPU) fail, it will send an email."
msgstr ""

#: ../../scenarios/admin.rst:192
msgid ""
"A full terminal application like a widely extended top which is based on "
"psutil and with the ability of a client-server monitoring is `glance "
"<https://github.com/nicolargo/glances/>`_."
msgstr ""

#: ../../scenarios/admin.rst:199
msgid "Ansible"
msgstr ""

#: ../../scenarios/admin.rst:201
msgid ""
"`Ansible <http://ansible.com/>`_  is an open source system automation "
"tool. Its biggest advantage over Puppet or Chef is that it does not "
"require an agent on the client machine. Playbooks are Ansible’s "
"configuration, deployment, and orchestration language and are written in "
"YAML with Jinja2 for templating."
msgstr ""

#: ../../scenarios/admin.rst:206
msgid "Ansible supports Python versions 2.6 and 2.7 and can be installed via pip:"
msgstr ""

#: ../../scenarios/admin.rst:212
msgid ""
"Ansible requires an inventory file that describes the hosts to which it "
"has access. Below is an example of a host and playbook that will ping all"
" the hosts in the inventory file."
msgstr ""

#: ../../scenarios/admin.rst:216
msgid "Here is an example inventory file: :file:`hosts.yml`"
msgstr ""

#: ../../scenarios/admin.rst:224
msgid "Here is an example playbook: :file:`ping.yml`"
msgstr ""

#: ../../scenarios/admin.rst:236
msgid "To run the playbook:"
msgstr ""

#: ../../scenarios/admin.rst:242
msgid ""
"The Ansible playbook will ping all of the servers in the "
":file:`hosts.yml` file. You can also select groups of servers using "
"Ansible. For more information about Ansible, read the `Ansible Docs "
"<http://docs.ansible.com/>`_."
msgstr ""

#: ../../scenarios/admin.rst:246
msgid ""
"`An Ansible tutorial <https://serversforhackers.com/an-ansible-"
"tutorial/>`_ is also a great and detailed introduction to getting started"
" with Ansible."
msgstr ""

#: ../../scenarios/admin.rst:252
msgid "Chef"
msgstr ""

#: ../../scenarios/admin.rst:254
msgid ""
"`Chef <https://www.chef.io/chef/>`_  is a systems and cloud "
"infrastructure automation framework that makes it easy to deploy servers "
"and applications to any physical, virtual, or cloud location. In case "
"this is your choice for configuration management, you will primarily use "
"Ruby to write your infrastructure code."
msgstr ""

#: ../../scenarios/admin.rst:259
msgid ""
"Chef clients run on every server that is part of your infrastructure and "
"these regularly check with your Chef server to ensure your system is "
"always aligned and represents the desired state. Since each individual "
"server has its own distinct Chef client, each server configures itself "
"and this distributed approach makes Chef a scalable automation platform."
msgstr ""

#: ../../scenarios/admin.rst:264
msgid ""
"Chef works by using custom recipes (configuration elements), implemented "
"in cookbooks. Cookbooks, which are basically packages for infrastructure "
"choices, are usually stored in your Chef server. Read the `DigitalOcean "
"tutorial series <https://www.digitalocean.com/community/tutorials/how-to-"
"install-a-chef-server-workstation-and-client-on-ubuntu-vps-instances>`_ "
"on Chef to learn how to create a simple Chef Server."
msgstr ""

#: ../../scenarios/admin.rst:270
msgid ""
"To create a simple cookbook the `knife "
"<https://docs.chef.io/knife.html>`_ command is used:"
msgstr ""

#: ../../scenarios/admin.rst:276
msgid ""
"`Getting started with Chef <http://gettingstartedwithchef.com/first-"
"steps-with-chef.html>`_ is a good starting point for Chef Beginners and "
"many community maintained cookbooks that can serve as a good reference or"
" tweaked to serve your infrastructure configuration needs can be found on"
" the `Chef Supermarket <https://supermarket.chef.io/cookbooks>`_."
msgstr ""

#: ../../scenarios/admin.rst:281
msgid "`Chef Documentation <https://docs.chef.io/>`_"
msgstr ""

#: ../../scenarios/admin.rst:286
msgid "Puppet"
msgstr ""

#: ../../scenarios/admin.rst:288
msgid ""
"`Puppet <http://puppetlabs.com>`_ is IT Automation and configuration "
"management software from Puppet Labs that allows System Administrators to"
" define the state of their IT Infrastructure, thereby providing an "
"elegant way to manage their fleet of physical and virtual machines."
msgstr ""

#: ../../scenarios/admin.rst:293
msgid ""
"Puppet is available both as an Open Source and an Enterprise variant. "
"Modules are small, shareable units of code written to automate or define "
"the state of a system.  `Puppet Forge <https://forge.puppetlabs.com/>`_ "
"is a repository for modules written by the community for Open Source and "
"Enterprise Puppet."
msgstr ""

#: ../../scenarios/admin.rst:298
msgid ""
"Puppet Agents are installed on nodes whose state needs to be monitored or"
" changed.  A designated server known as the Puppet Master is responsible "
"for orchestrating the agent nodes."
msgstr ""

#: ../../scenarios/admin.rst:302
msgid ""
"Agent nodes send basic facts about the system such as the operating "
"system, kernel, architecture, IP address, hostname, etc. to the Puppet "
"Master. The Puppet Master then compiles a catalog with information "
"provided by the agents on how each node should be configured and sends it"
" to the agent. The agent enforces the change as prescribed in the catalog"
" and sends a report back to the Puppet Master."
msgstr ""

#: ../../scenarios/admin.rst:309
msgid ""
"Facter is an interesting tool that ships with Puppet that pulls basic "
"facts about the system. These facts can be referenced as a variable while"
" writing your Puppet modules."
msgstr ""

#: ../../scenarios/admin.rst:322
msgid ""
"Writing Modules in Puppet is pretty straight forward. Puppet Manifests "
"together form Puppet Modules. Puppet manifests end with an extension of "
"``.pp``. Here is an example of 'Hello World' in Puppet."
msgstr ""

#: ../../scenarios/admin.rst:334
msgid ""
"Here is another example with system based logic. Note how the operating "
"system fact is being used as a variable prepended with the ``$`` sign. "
"Similarly, this holds true for other facts such as hostname which can be "
"referenced by ``$hostname``."
msgstr ""

#: ../../scenarios/admin.rst:348
msgid ""
"There are several resource types for Puppet but the package-file-service "
"paradigm is all you need for undertaking the majority of the "
"configuration management. The following Puppet code makes sure that the "
"OpenSSH-Server package is installed in a system and the sshd service is "
"notified to restart every time the sshd configuration file is changed."
msgstr ""

#: ../../scenarios/admin.rst:379
msgid ""
"For more information, refer to the `Puppet Labs Documentation "
"<http://docs.puppetlabs.com>`_"
msgstr ""

#: ../../scenarios/admin.rst:384
msgid "Blueprint"
msgstr ""

#: ../../scenarios/admin.rst:386
msgid "Por hacer"
msgstr ""

#: ../../scenarios/admin.rst:386
msgid "Write about Blueprint"
msgstr ""

#: ../../scenarios/admin.rst:391
msgid "Buildout"
msgstr ""

#: ../../scenarios/admin.rst:393
msgid ""
"`Buildout <http://www.buildout.org>`_ is an open source software build "
"tool. Buildout is created using the Python programming language. It "
"implements a principle of separation of configuration from the scripts "
"that do the setting up. Buildout is primarily used to download and set up"
" dependencies in `Python eggs "
"<https://stackoverflow.com/questions/2051192/what-is-a-python-egg>`_ "
"format of the software being developed or deployed. Recipes for build "
"tasks in any environment can be created, and many are already available."
msgstr ""

#: ../../scenarios/admin.rst:404
msgid "Shinken"
msgstr ""

#: ../../scenarios/admin.rst:406
msgid ""
"`Shinken <http://www.shinken-monitoring.org/>`_ is a modern, Nagios "
"compatible monitoring framework written in Python. Its main goal is to "
"give users a flexible architecture for their monitoring system that is "
"designed to scale to large environments."
msgstr ""

#: ../../scenarios/admin.rst:411
msgid ""
"Shinken is backwards-compatible with the Nagios configuration standard "
"and plugins. It works on any operating system and architecture that "
"supports Python, which includes Windows, Linux, and FreeBSD."
msgstr ""

#: ../../scenarios/ci.rst:4
msgid "Continuous Integration"
msgstr ""

#: ../../scenarios/ci.rst:9
msgid "For advice on writing your tests, see :doc:`/writing/tests`."
msgstr ""

#: ../../scenarios/ci.rst:14
msgid "Why?"
msgstr ""

#: ../../scenarios/ci.rst:16
msgid ""
"Martin Fowler, who first wrote about `Continuous Integration "
"<http://martinfowler.com/articles/continuousIntegration.html>`_ (short: "
"CI) together with Kent Beck, describes CI as follows:"
msgstr ""

#: ../../scenarios/ci.rst:19
msgid ""
"Continuous Integration is a software development practice where members "
"of a team integrate their work frequently, usually each person integrates"
" at least daily - leading to multiple integrations per day. Each "
"integration is verified by an automated build (including test) to detect "
"integration errors as quickly as possible. Many teams find that this "
"approach leads to significantly reduced integration problems and allows a"
" team to develop cohesive software more rapidly."
msgstr ""

#: ../../scenarios/ci.rst:30
msgid "Jenkins"
msgstr ""

#: ../../scenarios/ci.rst:32
msgid ""
"`Jenkins CI <http://jenkins-ci.org>`_ is an extensible Continuous "
"Integration engine. Use it."
msgstr ""

#: ../../scenarios/ci.rst:37
msgid "Buildbot"
msgstr ""

#: ../../scenarios/ci.rst:39
msgid ""
"`Buildbot <http://docs.buildbot.net/current/>`_ is a Python system to "
"automate the compile/test cycle to validate code changes."
msgstr ""

#: ../../scenarios/ci.rst:45
msgid "Tox"
msgstr ""

#: ../../scenarios/ci.rst:47
msgid ""
"`tox <https://tox.readthedocs.io/en/latest/>`_ is an automation tool "
"providing packaging, testing, and deployment of Python software right "
"from the console or CI server. It is a generic virtualenv management and "
"test command line tool which provides the following features:"
msgstr ""

#: ../../scenarios/ci.rst:52
msgid ""
"Checking that packages install correctly with different Python versions "
"and interpreters"
msgstr ""

#: ../../scenarios/ci.rst:54
msgid ""
"Running tests in each of the environments, configuring your test tool of "
"choice"
msgstr ""

#: ../../scenarios/ci.rst:56
msgid ""
"Acting as a front-end to Continuous Integration servers, reducing "
"boilerplate and merging CI and shell-based testing"
msgstr ""

#: ../../scenarios/ci.rst:62
msgid "Travis-CI"
msgstr ""

#: ../../scenarios/ci.rst:64
msgid ""
"`Travis-CI <https://travis-ci.org/>`_ is a distributed CI server which "
"builds tests for open source projects for free. It provides multiple "
"workers to run Python tests on and seamlessly integrates with GitHub. You"
" can even have it comment on your Pull Requests whether this particular "
"changeset breaks the build or not. So, if you are hosting your code on "
"GitHub, Travis-CI is a great and easy way to get started with Continuous "
"Integration."
msgstr ""

#: ../../scenarios/ci.rst:71
msgid ""
"In order to get started, add a :file:`.travis.yml` file to your "
"repository with this example content::"
msgstr ""

#: ../../scenarios/ci.rst:87
msgid ""
"This will get your project tested on all the listed Python versions by "
"running the given script, and will only build the ``master`` branch. "
"There are a lot more options you can enable, like notifications, before "
"and after steps, and much more. The `Travis-CI docs <https://docs.travis-"
"ci.com/user/languages/python/>`_ explain all of these options, and are "
"very thorough."
msgstr ""

#: ../../scenarios/ci.rst:93
msgid ""
"In order to activate testing for your project, go to `the Travis-CI site "
"<https://travis-ci.org/>`_ and login with your GitHub account. Then "
"activate your project in your profile settings and you're ready to go. "
"From now on, your project's tests will be run on every push to GitHub."
msgstr ""

#: ../../scenarios/cli.rst:4
msgid "Command-line Applications"
msgstr ""

#: ../../scenarios/cli.rst:8
msgid ""
"Command-line applications, also referred to as `Console Applications "
"<http://en.wikipedia.org/wiki/Console_application>`_, are computer "
"programs designed to be used from a text interface, such as a `shell "
"<http://en.wikipedia.org/wiki/Shell_(computing)>`_. Command-line "
"applications usually accept various inputs as arguments, often referred "
"to as parameters or sub-commands, as well as options, often referred to "
"as flags or switches."
msgstr ""

#: ../../scenarios/cli.rst:15
msgid "Some popular command-line applications include:"
msgstr ""

#: ../../scenarios/cli.rst:17
msgid ""
"`grep <http://en.wikipedia.org/wiki/grep>`_ - A plain-text data search "
"utility"
msgstr ""

#: ../../scenarios/cli.rst:18
msgid "`curl <http://curl.haxx.se/>`_ - A tool for data transfer with URL syntax"
msgstr ""

#: ../../scenarios/cli.rst:19
msgid ""
"`httpie <https://github.com/jakubroztocil/httpie>`_ - A command-line HTTP"
" client, a user-friendly cURL replacement"
msgstr ""

#: ../../scenarios/cli.rst:21
msgid "`Git <http://git-scm.com/>`_ - A distributed version control system"
msgstr ""

#: ../../scenarios/cli.rst:22
msgid ""
"`Mercurial <https://www.mercurial-scm.org/>`_ - A distributed version "
"control system primarily written in Python"
msgstr ""

#: ../../scenarios/cli.rst:28
msgid "Click"
msgstr ""

#: ../../scenarios/cli.rst:30
msgid ""
"`click <https://click.palletsprojects.com>`_ is a Python package for "
"creating command-line interfaces in a composable way with as little code "
"as possible. This “Command-Line Interface Creation Kit” is highly "
"configurable but comes with good defaults out of the box."
msgstr ""

#: ../../scenarios/cli.rst:38
msgid "docopt"
msgstr ""

#: ../../scenarios/cli.rst:40
msgid ""
"`docopt <http://docopt.org/>`_ is a lightweight, highly Pythonic package "
"that allows creating command-line interfaces easily and intuitively, by "
"parsing POSIX-style usage instructions."
msgstr ""

#: ../../scenarios/cli.rst:47
msgid "Plac"
msgstr ""

#: ../../scenarios/cli.rst:49
msgid ""
"`Plac <https://pypi.org/project/plac>`_ is a simple wrapper over the "
"Python standard library `argparse "
"<http://docs.python.org/2/library/argparse.html>`_, which hides most of "
"its complexity by using a declarative interface: the argument parser is "
"inferred rather than written down imperatively. This module targets "
"unsophisticated users, programmers, sysadmins, scientists, and in general"
" people writing throw-away scripts for themselves, who choose to create a"
" command-line interface because it is quick and simple."
msgstr ""

#: ../../scenarios/cli.rst:60
msgid "Cliff"
msgstr ""

#: ../../scenarios/cli.rst:62
msgid ""
"`Cliff <http://docs.openstack.org/developer/cliff/>`_  is a framework for"
" building command-line programs. It uses setuptools entry points to "
"provide subcommands, output formatters, and other extensions. The "
"framework is meant to be used to create multi-level commands such as "
"``svn`` and ``git``, where the main program handles some basic argument "
"parsing and then invokes a sub-command to do the work."
msgstr ""

#: ../../scenarios/cli.rst:72
msgid "Cement"
msgstr ""

#: ../../scenarios/cli.rst:74
msgid ""
"`Cement <http://builtoncement.com/>`_ is an advanced CLI Application "
"Framework. Its goal is to introduce a standard and feature-full platform "
"for both simple and complex command line applications as well as support "
"rapid development needs without sacrificing quality. Cement is flexible, "
"and its use cases span from the simplicity of a micro-framework to the "
"complexity of a mega-framework."
msgstr ""

#: ../../scenarios/cli.rst:84
msgid "Python Fire"
msgstr ""

#: ../../scenarios/cli.rst:86
msgid ""
"`Python Fire <https://github.com/google/python-fire/>`_ is a library for "
"automatically generating command-line interfaces from absolutely any "
"Python object. It can help debug Python code more easily from the command"
" line, create CLI interfaces to existing code, allow you to interactively"
" explore code in a REPL, and simplify transitioning between Python and "
"Bash (or any other shell)."
msgstr ""

#: ../../scenarios/clibs.rst:4
msgid "Interfacing with C/C++ Libraries"
msgstr ""

#: ../../scenarios/clibs.rst:11
msgid "C Foreign Function Interface"
msgstr ""

#: ../../scenarios/clibs.rst:13
msgid ""
"`CFFI <https://cffi.readthedocs.io/en/latest/>`_ provides a simple to use"
" mechanism for interfacing with C from both CPython and PyPy. It supports"
" two modes: an inline `ABI <https://stackoverflow.com/questions/2171177"
"/what-is-an-application-binary-interface-abi>`_ compatibility mode "
"(example provided below), which allows you to dynamically load and run "
"functions from executable modules (essentially exposing the same "
"functionality as `LoadLibrary <https://docs.microsoft.com/en-"
"us/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya>`_ or "
"`dlopen <https://www.tldp.org/HOWTO/C++-dlopen/index.html>`_), and an API"
" mode, which allows you to build C extension modules."
msgstr ""

#: ../../scenarios/clibs.rst:21
msgid "ABI Interaction"
msgstr ""

#: ../../scenarios/clibs.rst:37
msgid "ctypes"
msgstr ""

#: ../../scenarios/clibs.rst:39
msgid ""
"`ctypes <https://docs.python.org/3/library/ctypes.html>`_ is the de facto"
" standard library for interfacing with C/C++ from CPython, and it "
"provides not only full access to the native C interface of most major "
"operating systems (e.g., kernel32 on Windows, or libc on \\*nix), but "
"also provides support for loading and interfacing with dynamic libraries,"
" such as DLLs or shared objects, at runtime. It brings along with it a "
"whole host of types for interacting with system APIs, and allows you to "
"rather easily define your own complex types, such as structs and unions, "
"and allows you to modify things such as padding and alignment, if needed."
" It can be a bit crufty to use, but in conjunction with the `struct "
"<https://docs.python.org/3/library/struct.html>`_ module, you are "
"essentially provided full control over how your data types get translated"
" into something usable by a pure C/C++ method."
msgstr ""

#: ../../scenarios/clibs.rst:53
msgid "Struct Equivalents"
msgstr ""

#: ../../scenarios/clibs.rst:55
msgid ":file:`MyStruct.h`"
msgstr ""

#: ../../scenarios/clibs.rst:65
msgid ":file:`MyStruct.py`"
msgstr ""

#: ../../scenarios/clibs.rst:78
msgid "SWIG"
msgstr ""

#: ../../scenarios/clibs.rst:80
msgid ""
"`SWIG <http://www.swig.org>`_, though not strictly Python focused (it "
"supports a large number of scripting languages), is a tool for generating"
" bindings for interpreted languages from C/C++ header files. It is "
"extremely simple to use: the consumer simply needs to define an interface"
" file (detailed in the tutorial and documentations), include the "
"requisite C/C++ headers, and run the build tool against them. While it "
"does have some limits (it currently seems to have issues with a small "
"subset of newer C++ features, and getting template-heavy code to work can"
" be a bit verbose), it provides a great deal of power and exposes lots of"
" features to Python with little effort. Additionally, you can easily "
"extend the bindings SWIG creates (in the interface file) to overload "
"operators and built-in methods, effectively re- cast C++ exceptions to be"
" catchable by Python, etc."
msgstr ""

#: ../../scenarios/clibs.rst:94
msgid "Example: Overloading __repr__"
msgstr ""

#: ../../scenarios/clibs.rst:96
msgid ":file:`MyClass.h`"
msgstr ""

#: ../../scenarios/clibs.rst:110
msgid ":file:`myclass.i`"
msgstr ""

#: ../../scenarios/clibs.rst:135
msgid "Boost.Python"
msgstr ""

#: ../../scenarios/clibs.rst:137
msgid ""
"`Boost.Python <http://www.boost.org/doc/libs/1_59_0/libs/python/doc/>`_ "
"requires a bit more manual work to expose C++ object functionality, but "
"it is capable of providing all the same features SWIG does and then some,"
" to include providing wrappers to access PyObjects in C++, extracting "
"SWIG wrapper objects, and even embedding bits of Python into your C++ "
"code."
msgstr ""

#: ../../scenarios/client.rst:4
msgid "Network Applications"
msgstr ""

#: ../../scenarios/client.rst:11
msgid "HTTP"
msgstr ""

#: ../../scenarios/client.rst:13
msgid ""
"The Hypertext Transfer Protocol (HTTP) is an application protocol for "
"distributed, collaborative, hypermedia information systems. HTTP is the "
"foundation of data communication for the World Wide Web."
msgstr ""

#: ../../scenarios/client.rst:18
msgid "Requests"
msgstr ""

#: ../../scenarios/client.rst:20
msgid ""
"Python’s standard urllib2 module provides most of the HTTP capabilities "
"you need, but the API is thoroughly broken. It was built for a different "
"time — and a different web. It requires an enormous amount of work (even "
"method overrides) to perform the simplest of tasks."
msgstr ""

#: ../../scenarios/client.rst:25
msgid ""
"Requests takes all of the work out of Python HTTP — making your "
"integration with web services seamless. There’s no need to manually add "
"query strings to your URLs, or to form-encode your POST data. Keep-alive "
"and HTTP connection pooling are 100% automatic, powered by urllib3, which"
" is embedded within Requests."
msgstr ""

#: ../../scenarios/client.rst:31
msgid "`Documentation <http://docs.python-requests.org/en/latest/index.html>`_"
msgstr ""

#: ../../scenarios/client.rst:32
msgid "`PyPi <http://pypi.org/project/requests>`_"
msgstr ""

#: ../../scenarios/client.rst:33
msgid "`GitHub <https://github.com/kennethreitz/requests>`_"
msgstr ""

#: ../../scenarios/client.rst:38
msgid "Distributed Systems"
msgstr ""

#: ../../scenarios/client.rst:42
msgid "ZeroMQ"
msgstr ""

#: ../../scenarios/client.rst:44
msgid ""
"ØMQ (also spelled ZeroMQ, 0MQ or ZMQ) is a high-performance asynchronous "
"messaging library aimed at use in scalable distributed or concurrent "
"applications. It provides a message queue, but unlike message-oriented "
"middleware, a ØMQ system can run without a dedicated message broker. The "
"library is designed to have a familiar socket-style API."
msgstr ""

#: ../../scenarios/client.rst:51
msgid "RabbitMQ"
msgstr ""

#: ../../scenarios/client.rst:53
msgid ""
"RabbitMQ is an open source message broker software that implements the "
"Advanced Message Queuing Protocol (AMQP).  The RabbitMQ server is written"
" in the Erlang programming language and is built on the Open Telecom "
"Platform framework for clustering and failover. Client libraries to "
"interface with the broker are available for all major programming "
"languages."
msgstr ""

#: ../../scenarios/client.rst:59
msgid "`Homepage <http://www.rabbitmq.com/>`_"
msgstr ""

#: ../../scenarios/client.rst:60
msgid "`GitHub Organization <https://github.com/rabbitmq?page=1>`_"
msgstr ""

#: ../../scenarios/crypto.rst:4
msgid "Cryptography"
msgstr ""

#: ../../scenarios/crypto.rst:11
msgid "cryptography"
msgstr ""

#: ../../scenarios/crypto.rst:13
msgid ""
"`cryptography <https://cryptography.io/en/latest/>`_ is an actively "
"developed library that provides cryptographic recipes and primitives. It "
"supports Python 2.6-2.7, Python 3.3+, and PyPy."
msgstr ""

#: ../../scenarios/crypto.rst:18
msgid ""
"cryptography is divided into two layers of recipes and hazardous "
"materials (hazmat).  The recipes layer provides a simple API for proper "
"symmetric encryption and the hazmat layer provides low-level "
"cryptographic primitives."
msgstr ""

#: ../../scenarios/crypto.rst:25 ../../scenarios/crypto.rst:57
#: ../../scenarios/imaging.rst:28 ../../scenarios/imaging.rst:77
#: ../../scenarios/ml.rst:33 ../../scenarios/ml.rst:49
msgid "Installation"
msgstr ""

#: ../../scenarios/crypto.rst:32 ../../scenarios/crypto.rst:62
#: ../../scenarios/imaging.rst:41 ../../scenarios/imaging.rst:92
#: ../../scenarios/ml.rst:66
msgid "Example"
msgstr ""

#: ../../scenarios/crypto.rst:34
msgid "Example code using high level symmetric encryption recipe:"
msgstr ""

#: ../../scenarios/crypto.rst:47
msgid "GPGME bindings"
msgstr ""

#: ../../scenarios/crypto.rst:49
msgid ""
"The `GPGME Python bindings "
"<https://dev.gnupg.org/source/gpgme/browse/master/lang/python/>`_ provide"
" Pythonic access to `GPG Made Easy "
"<https://dev.gnupg.org/source/gpgme/browse/master/>`_, a C API for the "
"entire GNU Privacy Guard suite of projects, including GPG, libgcrypt, and"
" gpgsm (the S/MIME engine). It supports Python 2.6, 2.7, 3.4, and above. "
"Depends on the SWIG C interface for Python as well as the GnuPG software "
"and libraries."
msgstr ""

#: ../../scenarios/crypto.rst:52
msgid ""
"A more comprehensive `GPGME Python Bindings HOWTO "
"<https://dev.gnupg.org/source/gpgme/browse/master/lang/python/docs/GPGMEpythonHOWTOen.org>`_"
" is available with the source, and an HTML version is available `at "
"http://files.au.adversary.org "
"<http://files.au.adversary.org/crypto/GPGMEpythonHOWTOen.html>`_.  Python"
" 3 sample scripts from the examples in the HOWTO are also provided with "
"the source and are accessible `at gnupg.org "
"<https://dev.gnupg.org/source/gpgme/browse/master/lang/python/examples/howto/>`_."
msgstr ""

#: ../../scenarios/crypto.rst:54
msgid ""
"Available under the same terms as the rest of the GnuPG Project: GPLv2 "
"and LGPLv2.1, both with the \"or any later version\" clause."
msgstr ""

#: ../../scenarios/crypto.rst:59
msgid ""
"Included by default when compiling GPGME if the configure script locates "
"a supported python version (which it will if it's in $PATH during "
"configuration)."
msgstr ""

#: ../../scenarios/db.rst:4
msgid "Databases"
msgstr ""

#: ../../scenarios/db.rst:11
msgid "DB-API"
msgstr ""

#: ../../scenarios/db.rst:13
msgid ""
"The Python Database API (DB-API) defines a standard interface for Python "
"database access modules. It's documented in :pep:`249`. Nearly all Python"
" database modules such as `sqlite3`, `psycopg`, and `mysql-python` "
"conform to this interface."
msgstr ""

#: ../../scenarios/db.rst:18
msgid ""
"Tutorials that explain how to work with modules that conform to this "
"interface can be found `here "
"<http://halfcooked.com/presentations/osdc2006/python_databases.html>`__ "
"and `here "
"<http://web.archive.org/web/20120815130844/http://www.amk.ca/python/writing"
"/DB-API.html>`__."
msgstr ""

#: ../../scenarios/db.rst:25
msgid "SQLAlchemy"
msgstr ""

#: ../../scenarios/db.rst:27
msgid ""
"`SQLAlchemy <http://www.sqlalchemy.org/>`_ is a commonly used database "
"toolkit. Unlike many database libraries it not only provides an ORM layer"
" but also a generalized API for writing database-agnostic code without "
"SQL."
msgstr ""

#: ../../scenarios/db.rst:38
msgid "Records"
msgstr ""

#: ../../scenarios/db.rst:40
msgid ""
"`Records <https://github.com/kennethreitz/records>`_ is minimalist SQL "
"library, designed for sending raw SQL queries to various databases. Data "
"can be used programmatically or exported to a number of useful data "
"formats."
msgstr ""

#: ../../scenarios/db.rst:48
msgid "Also included is a command-line tool for exporting SQL data."
msgstr ""

#: ../../scenarios/db.rst:53
msgid "PugSQL"
msgstr ""

#: ../../scenarios/db.rst:55
msgid ""
"`PugSQL <https://pugsql.org>`_ is a simple Python interface for "
"organizing and using parameterized, handwritten SQL. It is an anti-ORM "
"that is philosophically lo-fi, but it still presents a clean interface in"
" Python."
msgstr ""

#: ../../scenarios/db.rst:66
msgid "Django ORM"
msgstr ""

#: ../../scenarios/db.rst:68
msgid ""
"The Django ORM is the interface used by `Django "
"<https://www.djangoproject.com>`_ to provide database access."
msgstr ""

#: ../../scenarios/db.rst:71
msgid ""
"It's based on the idea of `models <https://docs.djangoproject.com/en/dev"
"/#the-model-layer>`_, an abstraction that makes it easier to manipulate "
"data in Python."
msgstr ""

#: ../../scenarios/db.rst:75
msgid "The basics:"
msgstr ""

#: ../../scenarios/db.rst:77
msgid "Each model is a Python class that subclasses django.db.models.Model."
msgstr ""

#: ../../scenarios/db.rst:78
msgid "Each attribute of the model represents a database field."
msgstr ""

#: ../../scenarios/db.rst:79
msgid ""
"Django gives you an automatically-generated database-access API; see "
"`Making queries "
"<https://docs.djangoproject.com/en/dev/topics/db/queries/>`__."
msgstr ""

#: ../../scenarios/db.rst:85
msgid "peewee"
msgstr ""

#: ../../scenarios/db.rst:87
msgid ""
"`peewee <http://docs.peewee-orm.com/en/latest/>`_ is another ORM with a "
"focus on being lightweight with support for Python 2.6+ and 3.2+ which "
"supports SQLite, MySQL, and PostgreSQL by default. The `model layer "
"<https://peewee.readthedocs.io/en/latest/peewee/quickstart.html#model-"
"definition>`_ is similar to that of the Django ORM and it has `SQL-like "
"methods <https://peewee.readthedocs.io/en/latest/peewee/quickstart.html"
"#retrieving-data>`_ to query data. While SQLite, MySQL, and PostgreSQL "
"are supported out-of-the-box, there is a `collection of add-ons "
"<https://peewee.readthedocs.io/en/latest/peewee/playhouse.html#playhouse>`_"
" available."
msgstr ""

#: ../../scenarios/db.rst:100
msgid "PonyORM"
msgstr ""

#: ../../scenarios/db.rst:102
msgid ""
"`PonyORM <http://ponyorm.com/>`_ is an ORM that takes a different "
"approach to querying the database. Instead of writing an SQL-like "
"language or boolean expressions, Python's generator syntax is used. "
"There's also a graphical schema editor that can generate PonyORM entities"
" for you. It supports Python 2.6+ and Python 3.3+ and can connect to "
"SQLite, MySQL, PostgreSQL, and Oracle."
msgstr ""

#: ../../scenarios/db.rst:111
msgid "SQLObject"
msgstr ""

#: ../../scenarios/db.rst:113
msgid ""
"`SQLObject <http://www.sqlobject.org/>`_ is yet another ORM. It supports "
"a wide variety of databases: common database systems like MySQL, "
"PostgreSQL, and SQLite and more exotic systems like SAP DB, SyBase, and "
"Microsoft SQL Server. It only supports Python 2 from Python 2.6 upwards."
msgstr ""

#: ../../scenarios/gui.rst:4
msgid "GUI Applications"
msgstr ""

#: ../../scenarios/gui.rst:9
msgid "Alphabetical list of GUI Applications."
msgstr ""

#: ../../scenarios/gui.rst:14
msgid "Camelot"
msgstr ""

#: ../../scenarios/gui.rst:16
msgid ""
"`Camelot <http://www.python-camelot.com>`_ provides components for "
"building applications on top of Python, SQLAlchemy, and Qt.  It is "
"inspired by the Django admin interface."
msgstr ""

#: ../../scenarios/gui.rst:20
msgid ""
"The main resource for information is the website: http://www.python-"
"camelot.com and the mailing list https://groups.google.com/forum/#!forum"
"/project-camelot."
msgstr ""

#: ../../scenarios/gui.rst:27
msgid "Cocoa"
msgstr ""

#: ../../scenarios/gui.rst:29
msgid ""
"The Cocoa framework is only available on OS X. Don't pick this if you're "
"writing a cross-platform application!"
msgstr ""

#: ../../scenarios/gui.rst:34
msgid "GTk"
msgstr ""

#: ../../scenarios/gui.rst:36
msgid ""
"PyGTK provides Python bindings for the GTK+ toolkit. However, it has been"
" superseded by PyGObject. PyGTK should not be used for new projects and "
"existing projects should be ported to PyGObject."
msgstr ""

#: ../../scenarios/gui.rst:41
msgid "PyGObject aka (PyGi)"
msgstr ""

#: ../../scenarios/gui.rst:43
msgid ""
"`PyGObject <https://wiki.gnome.org/Projects/PyGObject>`_ provides Python "
"bindings which gives access to the entire GNOME software platform. It is "
"fully compatible with GTK+ 3. Here is a tutorial to get started with "
"`Python GTK+ 3 Tutorial <https://python-"
"gtk-3-tutorial.readthedocs.io/en/latest/>`_."
msgstr ""

#: ../../scenarios/gui.rst:48
msgid "`API Reference <http://lazka.github.io/pgi-docs/>`_"
msgstr ""

#: ../../scenarios/gui.rst:53
msgid "Kivy"
msgstr ""

#: ../../scenarios/gui.rst:55
msgid ""
"`Kivy <http://kivy.org>`_ is a Python library for development of multi-"
"touch enabled media rich applications. The aim is to allow for quick and "
"easy interaction design and rapid prototyping, while making your code "
"reusable and deployable."
msgstr ""

#: ../../scenarios/gui.rst:60
msgid ""
"Kivy is written in Python, based on OpenGL, and supports different input "
"devices such as: Mouse, Dual Mouse, TUIO, WiiMote, WM_TOUCH, HIDtouch, "
"Apple's products, and so on."
msgstr ""

#: ../../scenarios/gui.rst:64
msgid ""
"Kivy is actively being developed by a community and is free to use. It "
"operates on all major platforms (Linux, OS X, Windows, Android)."
msgstr ""

#: ../../scenarios/gui.rst:67
msgid "The main resource for information is the website: http://kivy.org"
msgstr ""

#: ../../scenarios/gui.rst:72
msgid "PyObjC"
msgstr ""

#: ../../scenarios/gui.rst:74
msgid ""
"Only available on OS X. Don't pick this if you're writing a cross-"
"platform application."
msgstr ""

#: ../../scenarios/gui.rst:79
msgid "PySide"
msgstr ""

#: ../../scenarios/gui.rst:81
msgid "PySide is a Python binding of the cross-platform GUI toolkit Qt."
msgstr ""

#: ../../scenarios/gui.rst:87
msgid "https://wiki.qt.io/Category:LanguageBindings::PySide::Downloads"
msgstr ""

#: ../../scenarios/gui.rst:92
msgid "PyQt"
msgstr ""

#: ../../scenarios/gui.rst:94
msgid ""
"If your software does not fully comply with the GPL you will need a "
"commercial license!"
msgstr ""

#: ../../scenarios/gui.rst:96
msgid "PyQt provides Python bindings for the Qt Framework (see below)."
msgstr ""

#: ../../scenarios/gui.rst:98
msgid "http://www.riverbankcomputing.co.uk/software/pyqt/download"
msgstr ""

#: ../../scenarios/gui.rst:103
msgid "Pyjs Desktop (formerly Pyjamas Desktop)"
msgstr ""

#: ../../scenarios/gui.rst:105
msgid ""
"Pyjs Desktop is a application widget set for desktop and a cross-platform"
" framework. It allows the exact same Python web application source code "
"to be executed as a standalone desktop application."
msgstr ""

#: ../../scenarios/gui.rst:110
msgid "The main website: `pyjs <http://pyjs.org/>`_."
msgstr ""

#: ../../scenarios/gui.rst:115
msgid "Qt"
msgstr ""

#: ../../scenarios/gui.rst:117
msgid ""
"`Qt <http://qt-project.org/>`_ is a cross-platform application framework "
"that is widely used for developing software with a GUI but can also be "
"used for non-GUI applications."
msgstr ""

#: ../../scenarios/gui.rst:124
msgid "PySimpleGUI"
msgstr ""

#: ../../scenarios/gui.rst:126
msgid ""
"`PySimpleGUI <https://pysimplegui.readthedocs.io/>`_ is a  wrapper for "
"Tkinter and Qt (others on the way).  The amount of code required to "
"implement custom GUIs is much shorter using PySimpleGUI than if the same "
"GUI were written directly using Tkinter or Qt.  PySimpleGUI code can be "
"\"ported\" between GUI frameworks by changing import statements."
msgstr ""

#: ../../scenarios/gui.rst:136
msgid ""
"PySimpleGUI is contained in a single PySimpleGUI.py file.  Should pip "
"installation be impossible, copying the PySimpleGUI.py file into a "
"project's folder is all that's required to import and begin using."
msgstr ""

#: ../../scenarios/gui.rst:143
msgid "Toga"
msgstr ""

#: ../../scenarios/gui.rst:145
msgid ""
"`Toga <https://toga.readthedocs.io/en/latest/>`_ is a Python native, OS "
"native, cross platform GUI toolkit. Toga consists of a library of base "
"components with a shared interface to simplify platform-agnostic GUI "
"development."
msgstr ""

#: ../../scenarios/gui.rst:149
msgid ""
"Toga is available on macOS, Windows, Linux (GTK), and mobile platforms "
"such as Android and iOS."
msgstr ""

#: ../../scenarios/gui.rst:155
msgid "Tk"
msgstr ""

#: ../../scenarios/gui.rst:157
msgid ""
"Tkinter is a thin object-oriented layer on top of Tcl/Tk. **It has the "
"advantage of being included with the Python standard library, making it "
"the most convenient and compatible toolkit to program with.**"
msgstr ""

#: ../../scenarios/gui.rst:161
msgid ""
"Both Tk and Tkinter are available on most Unix platforms, as well as on "
"Windows and Macintosh systems. Starting with the 8.0 release, Tk offers "
"native look and feel on all platforms."
msgstr ""

#: ../../scenarios/gui.rst:165
msgid ""
"There's a good multi-language Tk tutorial with Python examples at `TkDocs"
" <http://www.tkdocs.com/tutorial/index.html>`_. There's more information "
"available on the `Python Wiki <http://wiki.python.org/moin/TkInter>`_."
msgstr ""

#: ../../scenarios/gui.rst:172
msgid "wxPython"
msgstr ""

#: ../../scenarios/gui.rst:174
msgid ""
"wxPython is a GUI toolkit for the Python programming language. It allows "
"Python programmers to create programs with a robust, highly functional "
"graphical user interface, simply and easily. It is implemented as a "
"Python extension module (native code) that wraps the popular wxWidgets "
"cross platform GUI library, which is written in C++."
msgstr ""

#: ../../scenarios/gui.rst:180
msgid ""
"**Install (Stable) wxPython** *go to "
"https://www.wxpython.org/pages/downloads/ and download the appropriate "
"package for your OS.*"
msgstr ""

#: ../../scenarios/imaging.rst:4
msgid "Image Manipulation"
msgstr ""

#: ../../scenarios/imaging.rst:8
msgid ""
"Most image processing and manipulation techniques can be carried out "
"effectively using two libraries: Python Imaging Library (PIL) and Open "
"Source Computer Vision (OpenCV)."
msgstr ""

#: ../../scenarios/imaging.rst:12
msgid "A brief description of both is given below."
msgstr ""

#: ../../scenarios/imaging.rst:17
msgid "Python Imaging Library"
msgstr ""

#: ../../scenarios/imaging.rst:19
msgid ""
"The `Python Imaging Library <http://www.pythonware.com/products/pil/>`_, "
"or PIL for short, is one of the core libraries for image manipulation in "
"Python. Unfortunately, its development has stagnated, with its last "
"release in 2009."
msgstr ""

#: ../../scenarios/imaging.rst:23
msgid ""
"Luckily for you, there's an actively-developed fork of PIL called `Pillow"
" <http://python-pillow.github.io/>`_ -- it's easier to install, runs on "
"all major operating systems, and supports Python 3."
msgstr ""

#: ../../scenarios/imaging.rst:30
msgid ""
"Before installing Pillow, you'll have to install Pillow's prerequisites. "
"Find the instructions for your platform in the `Pillow installation "
"instructions "
"<https://pillow.readthedocs.io/en/3.0.0/installation.html>`_."
msgstr ""

#: ../../scenarios/imaging.rst:34
msgid "After that, it's straightforward:"
msgstr ""

#: ../../scenarios/imaging.rst:64
msgid ""
"There are more examples of the Pillow library in the `Pillow tutorial "
"<https://pillow.readthedocs.io/en/3.0.x/handbook/tutorial.html>`_."
msgstr ""

#: ../../scenarios/imaging.rst:70
msgid "Open Source Computer Vision"
msgstr ""

#: ../../scenarios/imaging.rst:72
msgid ""
"Open Source Computer Vision, more commonly known as OpenCV, is a more "
"advanced image manipulation and processing software than PIL. It has been"
" implemented in several languages and is widely used."
msgstr ""

#: ../../scenarios/imaging.rst:79
msgid ""
"In Python, image processing using OpenCV is implemented using the ``cv2``"
" and ``NumPy`` modules.  The `installation instructions for OpenCV "
"<http://docs.opencv.org/2.4/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html"
"#table-of-content-introduction>`_ should guide you through configuring "
"the project for yourself."
msgstr ""

#: ../../scenarios/imaging.rst:84
msgid "NumPy can be downloaded from the Python Package Index(PyPI):"
msgstr ""

#: ../../scenarios/imaging.rst:110
msgid ""
"There are more Python-implemented examples of OpenCV in this `collection "
"of tutorials <https://opencv-python-"
"tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html>`_."
msgstr ""

#: ../../scenarios/json.rst:4
msgid "JSON"
msgstr ""

#: ../../scenarios/json.rst:8
msgid ""
"The `json <https://docs.python.org/3/library/json.html>`_ library can "
"parse JSON from strings or files. The library parses JSON into a Python "
"dictionary or list. It can also convert Python dictionaries or lists into"
" JSON strings."
msgstr ""

#: ../../scenarios/json.rst:15
msgid "Parsing JSON"
msgstr ""

#: ../../scenarios/json.rst:17
msgid "Take the following string containing JSON data:"
msgstr ""

#: ../../scenarios/json.rst:23
msgid "It can be parsed like this:"
msgstr ""

#: ../../scenarios/json.rst:30
msgid "and can now be used as a normal dictionary:"
msgstr ""

#: ../../scenarios/json.rst:37
msgid "You can also convert the following to JSON:"
msgstr ""

#: ../../scenarios/ml.rst:5
msgid "Machine Learning"
msgstr ""

#: ../../scenarios/ml.rst:9
msgid ""
"Python has a vast number of libraries for data analysis, statistics, and "
"Machine Learning itself, making it a language of choice for many data "
"scientists."
msgstr ""

#: ../../scenarios/ml.rst:11
msgid ""
"Some widely used packages for Machine Learning and other data science "
"applications are listed below."
msgstr ""

#: ../../scenarios/ml.rst:16
msgid "SciPy Stack"
msgstr ""

#: ../../scenarios/ml.rst:18
msgid ""
"The SciPy stack consists of a bunch of core helper packages used in data "
"science for statistical analysis and visualising data. Because of its "
"huge number of functionalities and ease of use, the Stack is considered a"
" must-have for most data science applications."
msgstr ""

#: ../../scenarios/ml.rst:20
msgid ""
"The Stack consists of the following packages (link to documentation "
"given):"
msgstr ""

#: ../../scenarios/ml.rst:22
msgid "`NumPy <http://www.numpy.org/>`_"
msgstr ""

#: ../../scenarios/ml.rst:23
msgid "`SciPy library <https://www.scipy.org/>`_"
msgstr ""

#: ../../scenarios/ml.rst:24
msgid "`Matplotlib <http://matplotlib.org/>`_"
msgstr ""

#: ../../scenarios/ml.rst:25
msgid "`IPython <https://ipython.org/>`_"
msgstr ""

#: ../../scenarios/ml.rst:26
msgid "`pandas <http://pandas.pydata.org/>`_"
msgstr ""

#: ../../scenarios/ml.rst:27
msgid "`Sympy <http://www.sympy.org/en/index.html>`_"
msgstr ""

#: ../../scenarios/ml.rst:28
msgid "`nose <http://nose.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../../scenarios/ml.rst:30
msgid ""
"The stack also comes with Python bundled in, but has been excluded from "
"the above list."
msgstr ""

#: ../../scenarios/ml.rst:35
msgid ""
"For installing the full stack, or individual packages, you can refer to "
"the instructions given `here <https://www.scipy.org/install.html>`_."
msgstr ""

#: ../../scenarios/ml.rst:37
msgid ""
"**NB:** `Anaconda <https://www.continuum.io/anaconda-overview>`_ is "
"highly preferred and recommended for installing and maintaining data "
"science packages seamlessly."
msgstr ""

#: ../../scenarios/ml.rst:42
msgid "scikit-learn"
msgstr ""

#: ../../scenarios/ml.rst:44
msgid ""
"Scikit is a free and open source machine learning library for Python. It "
"offers off-the-shelf functions to implement many algorithms like linear "
"regression, classifiers, SVMs, k-means, Neural Networks, etc. It also has"
" a few sample datasets which can be directly used for training and "
"testing."
msgstr ""

#: ../../scenarios/ml.rst:46
msgid ""
"Because of its speed, robustness, and ease of, it's one of the most "
"widely-used libraries for many Machine Learning applications."
msgstr ""

#: ../../scenarios/ml.rst:51
msgid "Through PyPI:"
msgstr ""

#: ../../scenarios/ml.rst:57
msgid "Through conda:"
msgstr ""

#: ../../scenarios/ml.rst:63
msgid ""
"scikit-learn also comes shipped with Anaconda (mentioned above). For more"
" installation instructions, refer to `this link <http://scikit-"
"learn.org/stable/install.html>`_."
msgstr ""

#: ../../scenarios/ml.rst:68
msgid ""
"For this example, we train a simple classifier on the `Iris dataset "
"<http://en.wikipedia.org/wiki/Iris_flower_data_set>`_, which comes "
"bundled in with scikit-learn."
msgstr ""

#: ../../scenarios/ml.rst:70
msgid ""
"The dataset takes four features of flowers: sepal length, sepal width, "
"petal length, and petal width, and classifies them into three flower "
"species (labels): setosa, versicolor, or virginica. The labels have been "
"represented as numbers in the dataset: 0 (setosa), 1 (versicolor), and 2 "
"(virginica)."
msgstr ""

#: ../../scenarios/ml.rst:72
msgid ""
"We shuffle the Iris dataset and divide it into separate training and "
"testing sets, keeping the last 10 data points for testing and rest for "
"training. We then train the classifier on the training set and predict on"
" the testing set."
msgstr ""

#: ../../scenarios/ml.rst:115
msgid ""
"Since we're splitting randomly and the classifier trains on every "
"iteration, the accuracy may vary. Running the above code gives:"
msgstr ""

#: ../../scenarios/ml.rst:123
msgid ""
"The first line contains the labels (i.e. flower species) of the testing "
"data as predicted by our classifier, and the second line contains the "
"actual flower species as given in the dataset. We thus get an accuracy of"
" 100% this time."
msgstr ""

#: ../../scenarios/ml.rst:125
msgid ""
"More on scikit-learn can be read in the `documentation <http://scikit-"
"learn.org/stable/user_guide.html>`_."
msgstr ""

#: ../../scenarios/network.rst:4
msgid "Networking"
msgstr ""

#: ../../scenarios/network.rst:11
msgid "Twisted"
msgstr ""

#: ../../scenarios/network.rst:13
msgid ""
"`Twisted <https://twistedmatrix.com/trac/>`_ is an event-driven "
"networking engine. It can be used to build applications around many "
"different networking protocols, including HTTP servers and clients, "
"applications using SMTP, POP3, IMAP, or SSH protocols, instant messaging,"
" and `much more <https://twistedmatrix.com/trac/wiki/Documentation>`_."
msgstr ""

#: ../../scenarios/network.rst:22
msgid "PyZMQ"
msgstr ""

#: ../../scenarios/network.rst:24
msgid ""
"`PyZMQ <https://zeromq.github.com/pyzmq/>`_ is the Python binding for "
"`ZeroMQ <http://zeromq.org/>`_, which is a high-performance asynchronous "
"messaging library. One great advantage of ZeroMQ is that it can be used "
"for message queuing without a message broker. The basic patterns for this"
" are:"
msgstr ""

#: ../../scenarios/network.rst:29
msgid ""
"request-reply: connects a set of clients to a set of services. This is a "
"remote procedure call and task distribution pattern."
msgstr ""

#: ../../scenarios/network.rst:31
msgid ""
"publish-subscribe: connects a set of publishers to a set of subscribers. "
"This is a data distribution pattern."
msgstr ""

#: ../../scenarios/network.rst:33
msgid ""
"push-pull (or pipeline): connects nodes in a fan-out/fan-in pattern that "
"can have multiple steps and loops. This is a parallel task distribution "
"and collection pattern."
msgstr ""

#: ../../scenarios/network.rst:37
msgid ""
"For a quick start, read the `ZeroMQ guide "
"<http://zguide.zeromq.org/page:all>`_."
msgstr ""

#: ../../scenarios/network.rst:42
msgid "gevent"
msgstr ""

#: ../../scenarios/network.rst:44
msgid ""
"`gevent <http://www.gevent.org/>`_ is a coroutine-based Python networking"
" library that uses greenlets to provide a high-level synchronous API on "
"top of the libev event loop."
msgstr ""

#: ../../scenarios/scientific.rst:4
msgid "Scientific Applications"
msgstr ""

#: ../../scenarios/scientific.rst:11 ../../scenarios/speed.rst:43
#: ../../scenarios/web.rst:15
msgid "Context"
msgstr ""

#: ../../scenarios/scientific.rst:13
msgid ""
"Python is frequently used for high-performance scientific applications. "
"It is widely used in academia and scientific projects because it is easy "
"to write and performs well."
msgstr ""

#: ../../scenarios/scientific.rst:17
msgid ""
"Due to its high performance nature, scientific computing in Python often "
"utilizes external libraries, typically written in faster languages (like "
"C, or Fortran for matrix operations). The main libraries used are "
"`NumPy`_, `SciPy`_ and `Matplotlib`_. Going into detail about these "
"libraries is beyond the scope of the Python guide. However, a "
"comprehensive introduction to the scientific Python ecosystem can be "
"found in the `Python Scientific Lecture Notes <http://scipy-"
"lectures.github.com/>`_."
msgstr ""

#: ../../scenarios/scientific.rst:28
msgid "Tools"
msgstr ""

#: ../../scenarios/scientific.rst:31
msgid "IPython"
msgstr ""

#: ../../scenarios/scientific.rst:33
msgid ""
"`IPython <http://ipython.org/>`_ is an enhanced version of Python "
"interpreter, which provides features of great interest to scientists. The"
" `inline mode` allows graphics and plots to be displayed in the terminal "
"(Qt based version). Moreover, the `notebook` mode supports literate "
"programming and reproducible science generating a web-based Python "
"notebook. This notebook allows you to store chunks of Python code "
"alongside the results and additional comments (HTML, LaTeX, Markdown). "
"The notebook can then be shared and exported in various file formats."
msgstr ""

#: ../../scenarios/scientific.rst:45
msgid "Libraries"
msgstr ""

#: ../../scenarios/scientific.rst:48
msgid "NumPy"
msgstr ""

#: ../../scenarios/scientific.rst:50
msgid ""
"`NumPy <http://numpy.scipy.org/>`_ is a low level library written in C "
"(and Fortran) for high level mathematical functions. NumPy cleverly "
"overcomes the problem of running slower algorithms on Python by using "
"multidimensional arrays and functions that operate on arrays. Any "
"algorithm can then be expressed as a function on arrays, allowing the "
"algorithms to be run quickly."
msgstr ""

#: ../../scenarios/scientific.rst:56
msgid ""
"NumPy is part of the SciPy project, and is released as a separate library"
" so people who only need the basic requirements can use it without "
"installing the rest of SciPy."
msgstr ""

#: ../../scenarios/scientific.rst:60
msgid "NumPy is compatible with Python versions 2.4 through 2.7.2 and 3.1+."
msgstr ""

#: ../../scenarios/scientific.rst:63
msgid "Numba"
msgstr ""

#: ../../scenarios/scientific.rst:65
msgid ""
"`Numba <http://numba.pydata.org>`_ is a NumPy aware Python compiler "
"(just-in-time (JIT) specializing compiler) which compiles annotated "
"Python (and NumPy) code to LLVM (Low Level Virtual Machine) through "
"special decorators. Briefly, Numba uses a system that compiles Python "
"code with LLVM to code which can be natively executed at runtime."
msgstr ""

#: ../../scenarios/scientific.rst:72
msgid "SciPy"
msgstr ""

#: ../../scenarios/scientific.rst:74
msgid ""
"`SciPy <http://scipy.org/>`_ is a library that uses NumPy for more "
"mathematical functions. SciPy uses NumPy arrays as the basic data "
"structure, and comes with modules for various commonly used tasks in "
"scientific programming, including linear algebra, integration (calculus),"
" ordinary differential equation solving, and signal processing."
msgstr ""

#: ../../scenarios/scientific.rst:81
msgid "Matplotlib"
msgstr ""

#: ../../scenarios/scientific.rst:83
msgid ""
"`Matplotlib <http://matplotlib.sourceforge.net/>`_ is a flexible plotting"
" library for creating interactive 2D and 3D plots that can also be saved "
"as manuscript-quality figures. The API in many ways reflects that of "
"`MATLAB <http://www.mathworks.com/products/matlab/>`_, easing transition "
"of MATLAB users to Python. Many examples, along with the source code to "
"recreate them, are available in the `matplotlib gallery "
"<http://matplotlib.sourceforge.net/gallery.html>`_."
msgstr ""

#: ../../scenarios/scientific.rst:92
msgid "Pandas"
msgstr ""

#: ../../scenarios/scientific.rst:94
msgid ""
"`Pandas <http://pandas.pydata.org/>`_ is a data manipulation library "
"based on NumPy which provides many useful functions for accessing, "
"indexing, merging, and grouping data easily. The main data structure "
"(DataFrame) is close to what could be found in the R statistical package;"
" that is, heterogeneous data tables with name indexing, time series "
"operations, and auto-alignment of data."
msgstr ""

#: ../../scenarios/scientific.rst:102
msgid "xarray"
msgstr ""

#: ../../scenarios/scientific.rst:104
msgid ""
"`xarray <http://xarray.pydata.org/en/stable/>`_ is similar to Pandas, but"
" it is intended for wrapping multidimensional scientific data. By "
"labelling the data with dimensions, coordinates, and attributes, it makes"
" complex multidimensional operations clearer and more intuitive. It also "
"wraps matplotlib for quick plotting, and can apply most operations in "
"parallel using `dask <http://xarray.pydata.org/en/stable/dask.html>`_."
msgstr ""

#: ../../scenarios/scientific.rst:113
msgid "Rpy2"
msgstr ""

#: ../../scenarios/scientific.rst:115
msgid ""
"`Rpy2 <http://rpy2.bitbucket.org>`_ is a Python binding for the R "
"statistical package allowing the execution of R functions from Python and"
" passing data back and forth between the two environments. Rpy2 is the "
"object oriented implementation of the `Rpy "
"<http://rpy.sourceforge.net/rpy.html>`_ bindings."
msgstr ""

#: ../../scenarios/scientific.rst:122
msgid "PsychoPy"
msgstr ""

#: ../../scenarios/scientific.rst:124
msgid ""
"`PsychoPy <http://www.psychopy.org/>`_ is a library for cognitive "
"scientists allowing the creation of cognitive psychology and neuroscience"
" experiments. The library handles presentation of stimuli, scripting of "
"experimental design, and data collection."
msgstr ""

#: ../../scenarios/scientific.rst:132
msgid "Resources"
msgstr ""

#: ../../scenarios/scientific.rst:134
msgid ""
"Installation of scientific Python packages can be troublesome, as many of"
" these packages are implemented as Python C extensions which need to be "
"compiled. This section lists various so-called scientific Python "
"distributions which provide precompiled and easy-to-install collections "
"of scientific Python packages."
msgstr ""

#: ../../scenarios/scientific.rst:141
msgid "Unofficial Windows Binaries for Python Extension Packages"
msgstr ""

#: ../../scenarios/scientific.rst:143
msgid ""
"Many people who do scientific computing are on Windows, yet many of the "
"scientific computing packages are notoriously difficult to build and "
"install on this platform. `Christoph Gohlke "
"<http://www.lfd.uci.edu/~gohlke/pythonlibs/>`_, however, has compiled a "
"list of Windows binaries for many useful Python packages.  The list of "
"packages has grown from a mainly scientific Python resource to a more "
"general list. If you're on Windows, you may want to check it out."
msgstr ""

#: ../../scenarios/scientific.rst:152
msgid "Anaconda"
msgstr ""

#: ../../scenarios/scientific.rst:154
msgid ""
"The `Anaconda Python Distribution <https://www.anaconda.com/>`_ includes "
"all the common scientific Python packages as well as many packages "
"related to data analytics and big data. Anaconda itself is free, and a "
"number of proprietary add-ons are available for a fee. Free licenses for "
"the add-ons are available for academics and researchers."
msgstr ""

#: ../../scenarios/scientific.rst:161
msgid "Canopy"
msgstr ""

#: ../../scenarios/scientific.rst:163
msgid ""
"`Canopy <https://www.enthought.com/product/canopy/>`_ is another "
"scientific Python distribution, produced by `Enthought "
"<https://www.enthought.com/>`_. A limited 'Canopy Express' variant is "
"available for free, but Enthought charges for the full distribution. Free"
" licenses are available for academics."
msgstr ""

#: ../../scenarios/scrape.rst:4
msgid "HTML Scraping"
msgstr ""

#: ../../scenarios/scrape.rst:11
msgid "Web Scraping"
msgstr ""

#: ../../scenarios/scrape.rst:13
msgid ""
"Web sites are written using HTML, which means that each web page is a "
"structured document. Sometimes it would be great to obtain some data from"
" them and preserve the structure while we're at it. Web sites don't "
"always provide their data in comfortable formats such as CSV or JSON."
msgstr ""

#: ../../scenarios/scrape.rst:18
msgid ""
"This is where web scraping comes in. Web scraping is the practice of "
"using a computer program to sift through a web page and gather the data "
"that you need in a format most useful to you while at the same time "
"preserving the structure of the data."
msgstr ""

#: ../../scenarios/scrape.rst:26
msgid "lxml and Requests"
msgstr ""

#: ../../scenarios/scrape.rst:28
msgid ""
"`lxml <http://lxml.de/>`_ is a pretty extensive library written for "
"parsing XML and HTML documents very quickly, even handling messed up tags"
" in the process. We will also be using the `Requests <http://docs.python-"
"requests.org/en/latest/>`_ module instead of the already built-in urllib2"
" module due to improvements in speed and readability. You can easily "
"install both using ``pip install lxml`` and ``pip install requests``."
msgstr ""

#: ../../scenarios/scrape.rst:36
msgid "Let's start with the imports:"
msgstr ""

#: ../../scenarios/scrape.rst:43
msgid ""
"Next we will use ``requests.get`` to retrieve the web page with our data,"
" parse it using the ``html`` module, and save the results in ``tree``:"
msgstr ""

#: ../../scenarios/scrape.rst:51
msgid ""
"(We need to use ``page.content`` rather than ``page.text`` because "
"``html.fromstring`` implicitly expects ``bytes`` as input.)"
msgstr ""

#: ../../scenarios/scrape.rst:54
msgid ""
"``tree`` now contains the whole HTML file in a nice tree structure which "
"we can go over two different ways: XPath and CSSSelect. In this example, "
"we will focus on the former."
msgstr ""

#: ../../scenarios/scrape.rst:58
msgid ""
"XPath is a way of locating information in structured documents such as "
"HTML or XML documents. A good introduction to XPath is on `W3Schools "
"<http://www.w3schools.com/xml/xpath_intro.asp>`_ ."
msgstr ""

#: ../../scenarios/scrape.rst:62
msgid ""
"There are also various tools for obtaining the XPath of elements such as "
"FireBug for Firefox or the Chrome Inspector. If you're using Chrome, you "
"can right click an element, choose 'Inspect element', highlight the code,"
" right click again, and choose 'Copy XPath'."
msgstr ""

#: ../../scenarios/scrape.rst:67
msgid ""
"After a quick analysis, we see that in our page the data is contained in "
"two elements -- one is a div with title 'buyer-name' and the other is a "
"span with class 'item-price':"
msgstr ""

#: ../../scenarios/scrape.rst:76
msgid ""
"Knowing this we can create the correct XPath query and use the lxml "
"``xpath`` function like this:"
msgstr ""

#: ../../scenarios/scrape.rst:86
msgid "Let's see what we got exactly:"
msgstr ""

#: ../../scenarios/scrape.rst:106
msgid ""
"Congratulations! We have successfully scraped all the data we wanted from"
" a web page using lxml and Requests. We have it stored in memory as two "
"lists. Now we can do all sorts of cool stuff with it: we can analyze it "
"using Python or we can save it to a file and share it with the world."
msgstr ""

#: ../../scenarios/scrape.rst:111
msgid ""
"Some more cool ideas to think about are modifying this script to iterate "
"through the rest of the pages of this example dataset, or rewriting this "
"application to use threads for improved speed."
msgstr ""

#: ../../scenarios/serialization.rst:4
msgid "Data Serialization"
msgstr ""

#: ../../scenarios/serialization.rst:11
msgid "What is data serialization?"
msgstr ""

#: ../../scenarios/serialization.rst:13
msgid ""
"Data serialization is the process of converting structured data to a "
"format that allows sharing or storage of the data in a form that allows "
"recovery of its original structure. In some cases, the secondary "
"intention of data serialization is to minimize the data's size which then"
" reduces disk space or bandwidth requirements."
msgstr ""

#: ../../scenarios/serialization.rst:21
msgid "Flat vs. Nested data"
msgstr ""

#: ../../scenarios/serialization.rst:23
msgid ""
"Before beginning to serialize data, it is important to identify or decide"
" how the data should be structured during data serialization - flat or "
"nested. The differences in the two styles are shown in the below "
"examples."
msgstr ""

#: ../../scenarios/serialization.rst:27
msgid "Flat style:"
msgstr ""

#: ../../scenarios/serialization.rst:34
msgid "Nested style:"
msgstr ""

#: ../../scenarios/serialization.rst:42
msgid ""
"For more reading on the two styles, please see the discussion on `Python "
"mailing list <https://mail.python.org/pipermail/python-"
"list/2010-October/590762.html>`__, `IETF mailing list "
"<https://www.ietf.org/mail-archive/web/json/current/msg03739.html>`__ and"
" `in stackexchange "
"<https://softwareengineering.stackexchange.com/questions/350623/flat-or-"
"nested-json-for-hierarchal-data>`__."
msgstr ""

#: ../../scenarios/serialization.rst:49
msgid "Serializing Text"
msgstr ""

#: ../../scenarios/serialization.rst:53
msgid "Simple file (flat data)"
msgstr ""

#: ../../scenarios/serialization.rst:55
msgid ""
"If the data to be serialized is located in a file and contains flat data,"
" Python offers two methods to serialize data."
msgstr ""

#: ../../scenarios/serialization.rst:58
msgid "repr"
msgstr ""

#: ../../scenarios/serialization.rst:60
msgid ""
"The repr method in Python takes a single object parameter and returns a "
"printable representation of the input:"
msgstr ""

#: ../../scenarios/serialization.rst:79
msgid "ast.literal_eval"
msgstr ""

#: ../../scenarios/serialization.rst:81
msgid ""
"The literal_eval method safely parses and evaluates an expression for a "
"Python datatype. Supported data types are: strings, numbers, tuples, "
"lists, dicts, booleans, and None."
msgstr ""

#: ../../scenarios/serialization.rst:90
msgid "CSV file (flat data)"
msgstr ""

#: ../../scenarios/serialization.rst:92
msgid ""
"The CSV module in Python implements classes to read and write tabular "
"data in CSV format."
msgstr ""

#: ../../scenarios/serialization.rst:95
msgid "Simple example for reading:"
msgstr ""

#: ../../scenarios/serialization.rst:106
msgid "Simple example for writing:"
msgstr ""

#: ../../scenarios/serialization.rst:117
msgid ""
"The module's contents, functions, and examples can be found `in the "
"Python documentation <https://docs.python.org/3/library/csv.html>`__."
msgstr ""

#: ../../scenarios/serialization.rst:122
msgid "YAML (nested data)"
msgstr ""

#: ../../scenarios/serialization.rst:124
msgid ""
"There are many third party modules to parse and read/write YAML file "
"structures in Python. One such example is below."
msgstr ""

#: ../../scenarios/serialization.rst:137
msgid ""
"Documentation on the third party module can be found `in the PyYAML "
"Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`__."
msgstr ""

#: ../../scenarios/serialization.rst:142
msgid "JSON file (nested data)"
msgstr ""

#: ../../scenarios/serialization.rst:144
msgid ""
"Python's JSON module can be used to read and write JSON files. Example "
"code is below."
msgstr ""

#: ../../scenarios/serialization.rst:147
msgid "Reading:"
msgstr ""

#: ../../scenarios/serialization.rst:156
msgid "Writing:"
msgstr ""

#: ../../scenarios/serialization.rst:167
msgid "XML (nested data)"
msgstr ""

#: ../../scenarios/serialization.rst:169
msgid "XML parsing in Python is possible using the `xml` package."
msgstr ""

#: ../../scenarios/serialization.rst:171 ../../scenarios/serialization.rst:194
msgid "Example:"
msgstr ""

#: ../../scenarios/serialization.rst:180
msgid ""
"More documentation on using the `xml.dom` and `xml.sax` packages can be "
"found `in the Python XML library documentation "
"<https://docs.python.org/3/library/xml.html>`__."
msgstr ""

#: ../../scenarios/serialization.rst:186
msgid "Binary"
msgstr ""

#: ../../scenarios/serialization.rst:190
msgid "NumPy Array (flat data)"
msgstr ""

#: ../../scenarios/serialization.rst:192
msgid ""
"Python's NumPy array can be used to serialize and deserialize data to and"
" from byte representation."
msgstr ""

#: ../../scenarios/serialization.rst:210
msgid "Pickle (nested data)"
msgstr ""

#: ../../scenarios/serialization.rst:212
msgid ""
"The native data serialization module for Python is called `Pickle "
"<https://docs.python.org/2/library/pickle.html>`_."
msgstr ""

#: ../../scenarios/serialization.rst:215
msgid "Here's an example:"
msgstr ""

#: ../../scenarios/serialization.rst:233
msgid "Protobuf"
msgstr ""

#: ../../scenarios/serialization.rst:235
msgid ""
"If you're looking for a serialization module that has support in multiple"
" languages, Google's `Protobuf <https://developers.google.com/protocol-"
"buffers>`_ library is an option."
msgstr ""

#: ../../scenarios/speed.rst:4
msgid "Speed"
msgstr ""

#: ../../scenarios/speed.rst:8
msgid ""
"CPython, the most commonly used implementation of Python, is slow for CPU"
" bound tasks. `PyPy`_ is fast."
msgstr ""

#: ../../scenarios/speed.rst:11
msgid ""
"Using a slightly modified version of `David Beazley's`_ CPU bound test "
"code (added loop for multiple tests), you can see the difference between "
"CPython and PyPy's processing."
msgstr ""

#: ../../scenarios/speed.rst:47 ../../scenarios/speed.rst:65
msgid "The GIL"
msgstr ""

#: ../../scenarios/speed.rst:49
msgid ""
"`The GIL`_ (Global Interpreter Lock) is how Python allows multiple "
"threads to operate at the same time. Python's memory management isn't "
"entirely thread-safe, so the GIL is required to prevent multiple threads "
"from running the same Python code at once."
msgstr ""

#: ../../scenarios/speed.rst:54
msgid ""
"David Beazley has a great `guide`_ on how the GIL operates. He also "
"covers the `new GIL`_ in Python 3.2. His results show that maximizing "
"performance in a Python application requires a strong understanding of "
"the GIL, how it affects your specific application, how many cores you "
"have, and where your application bottlenecks are."
msgstr ""

#: ../../scenarios/speed.rst:61 ../../scenarios/speed.rst:73
msgid "C Extensions"
msgstr ""

#: ../../scenarios/speed.rst:67
msgid ""
"`Special care`_ must be taken when writing C extensions to make sure you "
"register your threads with the interpreter."
msgstr ""

#: ../../scenarios/speed.rst:77
msgid "Cython"
msgstr ""

#: ../../scenarios/speed.rst:79
msgid ""
"`Cython <https://cython.org/>`_ implements a superset of the Python "
"language with which you are able to write C and C++ modules for Python. "
"Cython also allows you to call functions from compiled C libraries. Using"
" Cython allows you to take advantage of Python's strong typing of "
"variables and operations."
msgstr ""

#: ../../scenarios/speed.rst:84
msgid "Here's an example of strong typing with Cython:"
msgstr ""

#: ../../scenarios/speed.rst:111
msgid ""
"This implementation of an algorithm to find prime numbers has some "
"additional keywords compared to the next one, which is implemented in "
"pure Python:"
msgstr ""

#: ../../scenarios/speed.rst:136
msgid ""
"Notice that in the Cython version you declare integers and integer arrays"
" to be compiled into C types while also creating a Python list:"
msgstr ""

#: ../../scenarios/speed.rst:159
msgid ""
"What is the difference? In the upper Cython version you can see the "
"declaration of the variable types and the integer array in a similar way "
"as in standard C. For example `cdef int n,k,i` in line 3. This additional"
" type declaration (i.e. integer) allows the Cython compiler to generate "
"more efficient C code from the second version. While standard Python code"
" is saved in :file:`*.py` files, Cython code is saved in :file:`*.pyx` "
"files."
msgstr ""

#: ../../scenarios/speed.rst:166
msgid "What's the difference in speed? Let's try it!"
msgstr ""

#: ../../scenarios/speed.rst:190
msgid "These lines both need a remark:"
msgstr ""

#: ../../scenarios/speed.rst:198
msgid ""
"The `pyximport` module allows you to import :file:`*.pyx` files (e.g., "
":file:`primesCy.pyx`) with the Cython-compiled version of the `primes` "
"function. The `pyximport.install()` command allows the Python interpreter"
" to start the Cython compiler directly to generate C code, which is "
"automatically compiled to a :file:`*.so` C library. Cython is then able "
"to import this library for you in your Python code, easily and "
"efficiently. With the `time.time()` function you are able to compare the "
"time between these 2 different calls to find 500 prime numbers. On a "
"standard notebook (dual core AMD E-450 1.6 GHz), the measured values are:"
msgstr ""

#: ../../scenarios/speed.rst:215
msgid ""
"And here is the output of an embedded `ARM beaglebone "
"<http://beagleboard.org/Products/BeagleBone>`_ machine:"
msgstr ""

#: ../../scenarios/speed.rst:225
msgid "Pyrex"
msgstr ""

#: ../../scenarios/speed.rst:229
msgid "Shedskin?"
msgstr ""

#: ../../scenarios/speed.rst:234
msgid "Concurrency"
msgstr ""

#: ../../scenarios/speed.rst:238
msgid "Concurrent.futures"
msgstr ""

#: ../../scenarios/speed.rst:240
msgid ""
"The `concurrent.futures`_ module is a module in the standard library that"
" provides a \"high-level interface for asynchronously executing "
"callables\". It abstracts away a lot of the more complicated details "
"about using multiple threads or processes for concurrency, and allows the"
" user to focus on accomplishing the task at hand."
msgstr ""

#: ../../scenarios/speed.rst:246
msgid ""
"The `concurrent.futures`_ module exposes two main classes, the "
"`ThreadPoolExecutor` and the `ProcessPoolExecutor`. The "
"ThreadPoolExecutor will create a pool of worker threads that a user can "
"submit jobs to. These jobs will then be executed in another thread when "
"the next worker thread becomes available."
msgstr ""

#: ../../scenarios/speed.rst:252
msgid ""
"The ProcessPoolExecutor works in the same way, except instead of using "
"multiple threads for its workers, it will use multiple processes. This "
"makes it possible to side-step the GIL; however, because of the way "
"things are passed to worker processes, only picklable objects can be "
"executed and returned."
msgstr ""

#: ../../scenarios/speed.rst:257
msgid ""
"Because of the way the GIL works, a good rule of thumb is to use a "
"ThreadPoolExecutor when the task being executed involves a lot of "
"blocking (i.e. making requests over the network) and to use a "
"ProcessPoolExecutor executor when the task is computationally expensive."
msgstr ""

#: ../../scenarios/speed.rst:262
msgid ""
"There are two main ways of executing things in parallel using the two "
"Executors. One way is with the `map(func, iterables)` method. This works "
"almost exactly like the builtin `map()` function, except it will execute "
"everything in parallel."
msgstr ""

#: ../../scenarios/speed.rst:284
msgid ""
"For even more control, the `submit(func, *args, **kwargs)` method will "
"schedule a callable to be executed ( as `func(*args, **kwargs)`) and "
"returns a `Future`_ object that represents the execution of the callable."
msgstr ""

#: ../../scenarios/speed.rst:288
msgid ""
"The Future object provides various methods that can be used to check on "
"the progress of the scheduled callable. These include:"
msgstr ""

#: ../../scenarios/speed.rst:291
msgid "cancel()"
msgstr ""

#: ../../scenarios/speed.rst:292
msgid "Attempt to cancel the call."
msgstr ""

#: ../../scenarios/speed.rst:293
msgid "cancelled()"
msgstr ""

#: ../../scenarios/speed.rst:294
msgid "Return True if the call was successfully cancelled."
msgstr ""

#: ../../scenarios/speed.rst:296
msgid "running()"
msgstr ""

#: ../../scenarios/speed.rst:296
msgid ""
"Return True if the call is currently being executed and cannot be "
"cancelled."
msgstr ""

#: ../../scenarios/speed.rst:298
msgid "done()"
msgstr ""

#: ../../scenarios/speed.rst:299
msgid "Return True if the call was successfully cancelled or finished running."
msgstr ""

#: ../../scenarios/speed.rst:301
msgid "result()"
msgstr ""

#: ../../scenarios/speed.rst:301
msgid ""
"Return the value returned by the call. Note that this call will block "
"until the scheduled callable returns by default."
msgstr ""

#: ../../scenarios/speed.rst:304
msgid "exception()"
msgstr ""

#: ../../scenarios/speed.rst:304
msgid ""
"Return the exception raised by the call. If no exception was raised then "
"this returns None. Note that this will block just like `result()`."
msgstr ""

#: ../../scenarios/speed.rst:309
msgid "add_done_callback(fn)"
msgstr ""

#: ../../scenarios/speed.rst:307
msgid ""
"Attach a callback function that will be executed (as `fn(future)`) when "
"the scheduled callable returns."
msgstr ""

#: ../../scenarios/speed.rst:348
msgid ""
"The `concurrent.futures`_ module contains two helper functions for "
"working with Futures. The `as_completed(futures)` function returns an "
"iterator over the list of futures, yielding the futures as they complete."
msgstr ""

#: ../../scenarios/speed.rst:352
msgid ""
"The `wait(futures)` function will simply block until all futures in the "
"list of futures provided have completed."
msgstr ""

#: ../../scenarios/speed.rst:355
msgid ""
"For more information, on using the `concurrent.futures`_ module, consult "
"the official documentation."
msgstr ""

#: ../../scenarios/speed.rst:359
msgid "threading"
msgstr ""

#: ../../scenarios/speed.rst:361
msgid ""
"The standard library comes with a `threading`_ module that allows a user "
"to work with multiple threads manually."
msgstr ""

#: ../../scenarios/speed.rst:364
msgid ""
"Running a function in another thread is as simple as passing a callable "
"and its arguments to `Thread`'s constructor and then calling `start()`:"
msgstr ""

#: ../../scenarios/speed.rst:379
msgid "To wait until the thread has terminated, call `join()`:"
msgstr ""

#: ../../scenarios/speed.rst:385
msgid ""
"After calling `join()`, it is always a good idea to check whether the "
"thread is still alive (because the join call timed out):"
msgstr ""

#: ../../scenarios/speed.rst:395
msgid ""
"Because multiple threads have access to the same section of memory, "
"sometimes there might be situations where two or more threads are trying "
"to write to the same resource at the same time or where the output is "
"dependent on the sequence or timing of certain events. This is called a "
"`data race`_ or race condition. When this happens, the output will be "
"garbled or you may encounter problems which are difficult to debug. A "
"good example is this `Stack Overflow post`_."
msgstr ""

#: ../../scenarios/speed.rst:402
msgid ""
"The way this can be avoided is by using a `Lock`_ that each thread needs "
"to acquire before writing to a shared resource. Locks can be acquired and"
" released through either the contextmanager protocol (`with` statement), "
"or by using `acquire()` and `release()` directly. Here is a (rather "
"contrived) example:"
msgstr ""

#: ../../scenarios/speed.rst:434
msgid ""
"Here, we have a bunch of threads checking for changes on a list of sites "
"and whenever there are any changes, they attempt to write those changes "
"to a file by calling `log(changes)`. When `log()` is called, it will wait"
" to acquire the lock with `with file_lock:`. This ensures that at any one"
" time, only one thread is writing to the file."
msgstr ""

#: ../../scenarios/speed.rst:441
msgid "Spawning Processes"
msgstr ""

#: ../../scenarios/speed.rst:445
msgid "Multiprocessing"
msgstr ""

#: ../../scenarios/web.rst:4
msgid "Web Applications & Frameworks"
msgstr ""

#: ../../scenarios/web.rst:8
msgid ""
"As a powerful scripting language adapted to both fast prototyping and "
"bigger projects, Python is widely used in web application development."
msgstr ""

#: ../../scenarios/web.rst:20
msgid "WSGI"
msgstr ""

#: ../../scenarios/web.rst:22
msgid ""
"The Web Server Gateway Interface (or \"WSGI\" for short) is a standard "
"interface between web servers and Python web application frameworks. By "
"standardizing behavior and communication between web servers and Python "
"web frameworks, WSGI makes it possible to write portable Python web code "
"that can be deployed in any :ref:`WSGI-compliant web server <wsgi-"
"servers-ref>`. WSGI is documented in :pep:`3333`."
msgstr ""

#: ../../scenarios/web.rst:32
msgid "Frameworks"
msgstr ""

#: ../../scenarios/web.rst:34
msgid ""
"Broadly speaking, a web framework consists of a set of libraries and a "
"main handler within which you can build custom code to implement a web "
"application (i.e. an interactive web site). Most web frameworks include "
"patterns and utilities to accomplish at least the following:"
msgstr ""

#: ../../scenarios/web.rst:41
msgid "URL Routing"
msgstr ""

#: ../../scenarios/web.rst:40
msgid ""
"Matches an incoming HTTP request to a particular piece of Python code to "
"be invoked"
msgstr ""

#: ../../scenarios/web.rst:44
msgid "Request and Response Objects"
msgstr ""

#: ../../scenarios/web.rst:44
msgid "Encapsulates the information received from or sent to a user's browser"
msgstr ""

#: ../../scenarios/web.rst:48
msgid "Template Engine"
msgstr ""

#: ../../scenarios/web.rst:47
msgid ""
"Allows for separating Python code implementing an application's logic "
"from the HTML (or other) output that it produces"
msgstr ""

#: ../../scenarios/web.rst:53
msgid "Development Web Server"
msgstr ""

#: ../../scenarios/web.rst:51
msgid ""
"Runs an HTTP server on development machines to enable rapid development; "
"often automatically reloads server-side code when files are updated"
msgstr ""

#: ../../scenarios/web.rst:56
msgid "Django"
msgstr ""

#: ../../scenarios/web.rst:58
msgid ""
"`Django <https://www.djangoproject.com>`_ is a \"batteries included\" web"
" application framework, and is an excellent choice for creating content-"
"oriented websites. By providing many utilities and patterns out of the "
"box, Django aims to make it possible to build complex, database-backed "
"web applications quickly, while encouraging best practices in code "
"written using it."
msgstr ""

#: ../../scenarios/web.rst:64
msgid ""
"Django has a large and active community, and many pre-built `re-usable "
"modules <http://djangopackages.com/>`_ that can be incorporated into a "
"new project as-is, or customized to fit your needs."
msgstr ""

#: ../../scenarios/web.rst:68
msgid ""
"There are annual Django conferences `in the United States "
"<http://djangocon.us>`_, `Europe <http://djangocon.eu>`_, and `Australia "
"<http://djangocon.com.au>`_."
msgstr ""

#: ../../scenarios/web.rst:71
msgid "The majority of new Python web applications today are built with Django."
msgstr ""

#: ../../scenarios/web.rst:74
msgid "Flask"
msgstr ""

#: ../../scenarios/web.rst:76
msgid ""
"`Flask <http://flask.pocoo.org/>`_ is a \"microframework\" for Python, "
"and is an excellent choice for building smaller applications, APIs, and "
"web services."
msgstr ""

#: ../../scenarios/web.rst:79
msgid ""
"Building an app with Flask is a lot like writing standard Python modules,"
" except some functions have routes attached to them. It's really "
"beautiful."
msgstr ""

#: ../../scenarios/web.rst:82
msgid ""
"Rather than aiming to provide everything you could possibly need, Flask "
"implements the most commonly-used core components of a web application "
"framework, like URL routing, request and response objects, and templates."
msgstr ""

#: ../../scenarios/web.rst:86
msgid ""
"If you use Flask, it is up to you to choose other components for your "
"application, if any. For example, database access or form generation and "
"validation are not built-in functions of Flask."
msgstr ""

#: ../../scenarios/web.rst:90
msgid ""
"This is great, because many web applications don't need those features. "
"For those that do, there are many `Extensions "
"<http://flask.pocoo.org/extensions/>`_ available that may suit your "
"needs. Or, you can easily use any library you want yourself!"
msgstr ""

#: ../../scenarios/web.rst:95
msgid ""
"Flask is default choice for any Python web application that isn't a good "
"fit for Django."
msgstr ""

#: ../../scenarios/web.rst:99
msgid "Falcon"
msgstr ""

#: ../../scenarios/web.rst:101
msgid ""
"`Falcon <https://falconframework.org/>`_ is a good choice when your goal "
"is to build RESTful API microservices that are fast and scalable."
msgstr ""

#: ../../scenarios/web.rst:104
msgid ""
"It is a reliable, high-performance Python web framework for building "
"large-scale app backends and microservices. Falcon encourages the REST "
"architectural style of mapping URIs to resources, trying to do as little "
"as possible while remaining highly effective."
msgstr ""

#: ../../scenarios/web.rst:108
msgid ""
"Falcon highlights four main focuses: speed, reliability, flexibility, and"
" debuggability. It implements HTTP through \"responders\" such as "
"``on_get()``, ``on_put()``, etc. These responders receive intuitive "
"request and response objects."
msgstr ""

#: ../../scenarios/web.rst:113
msgid "Tornado"
msgstr ""

#: ../../scenarios/web.rst:115
msgid ""
"`Tornado <http://www.tornadoweb.org/>`_ is an asynchronous web framework "
"for Python that has its own event loop. This allows it to natively "
"support WebSockets, for example. Well-written Tornado applications are "
"known to have excellent performance characteristics."
msgstr ""

#: ../../scenarios/web.rst:120
msgid "I do not recommend using Tornado unless you think you need it."
msgstr ""

#: ../../scenarios/web.rst:123
msgid "Pyramid"
msgstr ""

#: ../../scenarios/web.rst:125
msgid ""
"`Pyramid <https://trypyramid.com/>`_ is a very flexible framework with a "
"heavy focus on modularity. It comes with a small number of libraries "
"(\"batteries\") built-in, and encourages users to extend its base "
"functionality. A set of provided cookiecutter templates helps making new "
"project decisions for users. It powers one of the most important parts of"
" python infrastructure `PyPI <https://pypi.org/>`_."
msgstr ""

#: ../../scenarios/web.rst:132
msgid ""
"Pyramid does not have a large user base, unlike Django and Flask. It's a "
"capable framework, but not a very popular choice for new Python web "
"applications today."
msgstr ""

#: ../../scenarios/web.rst:137
msgid "Masonite"
msgstr ""

#: ../../scenarios/web.rst:139
msgid ""
"`Masonite <https://docs.masoniteproject.com>`_ is a modern and developer "
"centric, \"batteries included\", web framework."
msgstr ""

#: ../../scenarios/web.rst:141
msgid ""
"The Masonite framework follows the MVC (Model-View-Controller) "
"architecture pattern and is heavily inspired by frameworks such as Rails "
"and Laravel, so if you are coming to Python from a Ruby or PHP background"
" then you will feel right at home!"
msgstr ""

#: ../../scenarios/web.rst:143
msgid ""
"Masonite comes with a lot of functionality out of the box including a "
"powerful IOC container with auto resolving dependency injection, craft "
"command line tools, and the Orator active record style ORM."
msgstr ""

#: ../../scenarios/web.rst:145
msgid ""
"Masonite is perfect for beginners or experienced developers alike and "
"works hard to be fast and easy from install through to deployment. Try it"
" once and you’ll fall in love."
msgstr ""

#: ../../scenarios/web.rst:148
msgid "FastAPI"
msgstr ""

#: ../../scenarios/web.rst:150
msgid ""
"`FastAPI <https://fastapi.tiangolo.com>`_ is a modern web framework for "
"building APIs with Python 3.6+."
msgstr ""

#: ../../scenarios/web.rst:153
msgid ""
"It has very high performance as it is based on `Starlette "
"<https://www.starlette.io>`_ and `Pydantic <https://pydantic-"
"docs.helpmanual.io>`_."
msgstr ""

#: ../../scenarios/web.rst:156
msgid ""
"FastAPI takes advantage of standard Python type declarations in function "
"parameters to declare request parameters and bodies, perform data "
"conversion (serialization, parsing), data validation, and automatic API "
"documentation with **OpenAPI 3** (including **JSON Schema**)."
msgstr ""

#: ../../scenarios/web.rst:161
msgid ""
"It includes tools and utilities for security and authentication "
"(including OAuth2 with JWT tokens), a dependency injection system, "
"automatic generation of interactive API documentation, and other "
"features."
msgstr ""

#: ../../scenarios/web.rst:168
msgid "Web Servers"
msgstr ""

#: ../../scenarios/web.rst:173
msgid "Nginx"
msgstr ""

#: ../../scenarios/web.rst:175
msgid ""
"`Nginx <http://nginx.org/>`_ (pronounced \"engine-x\") is a web server "
"and reverse-proxy for HTTP, SMTP, and other protocols. It is known for "
"its high performance, relative simplicity, and compatibility with many "
"application servers (like WSGI servers). It also includes handy features "
"like load-balancing, basic authentication, streaming, and others. "
"Designed to serve high-load websites, Nginx is gradually becoming quite "
"popular."
msgstr ""

#: ../../scenarios/web.rst:188
msgid "WSGI Servers"
msgstr ""

#: ../../scenarios/web.rst:190
msgid ""
"Stand-alone WSGI servers typically use less resources than traditional "
"web servers and provide top performance [1]_."
msgstr ""

#: ../../scenarios/web.rst:196
msgid "Gunicorn"
msgstr ""

#: ../../scenarios/web.rst:198
msgid ""
"`Gunicorn <https://gunicorn.org/>`_ (Green Unicorn) is a pure-Python WSGI"
" server used to serve Python applications. Unlike other Python web "
"servers, it has a thoughtful user interface, and is extremely easy to use"
" and configure."
msgstr ""

#: ../../scenarios/web.rst:203
msgid ""
"Gunicorn has sane and reasonable defaults for configurations. However, "
"some other servers, like uWSGI, are tremendously more customizable, and "
"therefore, are much more difficult to effectively use."
msgstr ""

#: ../../scenarios/web.rst:207
msgid "Gunicorn is the recommended choice for new Python web applications today."
msgstr ""

#: ../../scenarios/web.rst:211
msgid "Waitress"
msgstr ""

#: ../../scenarios/web.rst:213
msgid ""
"`Waitress <https://waitress.readthedocs.io>`_ is a pure-Python WSGI "
"server that claims \"very acceptable performance\". Its documentation is "
"not very detailed, but it does offer some nice functionality that "
"Gunicorn doesn't have (e.g. HTTP request buffering)."
msgstr ""

#: ../../scenarios/web.rst:218
msgid ""
"Waitress is gaining popularity within the Python web development "
"community."
msgstr ""

#: ../../scenarios/web.rst:223
msgid "uWSGI"
msgstr ""

#: ../../scenarios/web.rst:225
msgid ""
"`uWSGI <https://uwsgi-docs.readthedocs.io>`_ is a full stack for building"
" hosting services.  In addition to process management, process "
"monitoring, and other functionality, uWSGI acts as an application server "
"for various programming languages and protocols -- including Python and "
"WSGI. uWSGI can either be run as a stand-alone web router, or be run "
"behind a full web server (such as Nginx or Apache).  In the latter case, "
"a web server can configure uWSGI and an application's operation over the "
"`uwsgi protocol <https://uwsgi-"
"docs.readthedocs.io/en/latest/Protocol.html>`_. uWSGI's web server "
"support allows for dynamically configuring Python, passing environment "
"variables, and further tuning.  For full details, see `uWSGI magic "
"variables <https://uwsgi-docs.readthedocs.io/en/latest/Vars.html>`_."
msgstr ""

#: ../../scenarios/web.rst:238
msgid "I do not recommend using uWSGI unless you know why you need it."
msgstr ""

#: ../../scenarios/web.rst:245
msgid "Server Best Practices"
msgstr ""

#: ../../scenarios/web.rst:247
msgid ""
"The majority of self-hosted Python applications today are hosted with a "
"WSGI server such as :ref:`Gunicorn <gunicorn-ref>`, either directly or "
"behind a lightweight web server such as :ref:`nginx <nginx-ref>`."
msgstr ""

#: ../../scenarios/web.rst:251
msgid ""
"The WSGI servers serve the Python applications while the web server "
"handles tasks better suited for it such as static file serving, request "
"routing, DDoS protection, and basic authentication."
msgstr ""

#: ../../scenarios/web.rst:258
msgid "Hosting"
msgstr ""

#: ../../scenarios/web.rst:260
msgid ""
"Platform-as-a-Service (PaaS) is a type of cloud computing infrastructure "
"which abstracts and manages infrastructure, routing, and scaling of web "
"applications. When using a PaaS, application developers can focus on "
"writing application code rather than needing to be concerned with "
"deployment details."
msgstr ""

#: ../../scenarios/web.rst:267
msgid "Heroku"
msgstr ""

#: ../../scenarios/web.rst:269
msgid ""
"`Heroku <https://www.heroku.com/python>`_ offers first-class support for "
"Python 2.7–3.5 applications."
msgstr ""

#: ../../scenarios/web.rst:272
msgid ""
"Heroku supports all types of Python web applications, servers, and "
"frameworks. Applications can be developed on Heroku for free. Once your "
"application is ready for production, you can upgrade to a Hobby or "
"Professional application."
msgstr ""

#: ../../scenarios/web.rst:276
msgid ""
"Heroku maintains `detailed articles "
"<https://devcenter.heroku.com/categories/python-support>`_ on using "
"Python with Heroku, as well as `step-by-step instructions "
"<https://devcenter.heroku.com/articles/getting-started-with-python>`_ on "
"how to set up your first application."
msgstr ""

#: ../../scenarios/web.rst:281
msgid ""
"Heroku is the recommended PaaS for deploying Python web applications "
"today."
msgstr ""

#: ../../scenarios/web.rst:286
msgid "Templating"
msgstr ""

#: ../../scenarios/web.rst:288
msgid ""
"Most WSGI applications are responding to HTTP requests to serve content "
"in HTML or other markup languages. Instead of directly generating textual"
" content from Python, the concept of separation of concerns advises us to"
" use templates. A template engine manages a suite of template files, with"
" a system of hierarchy and inclusion to avoid unnecessary repetition, and"
" is in charge of rendering (generating) the actual content, filling the "
"static content of the templates with the dynamic content generated by the"
" application."
msgstr ""

#: ../../scenarios/web.rst:296
msgid ""
"As template files are sometimes written by designers or front-end "
"developers, it can be difficult to handle increasing complexity."
msgstr ""

#: ../../scenarios/web.rst:300
msgid ""
"Some general good practices apply to the part of the application passing "
"dynamic content to the template engine, and to the templates themselves."
msgstr ""

#: ../../scenarios/web.rst:303
msgid ""
"Template files should be passed only the dynamic content that is needed "
"for rendering the template. Avoid the temptation to pass additional "
"content \"just in case\": it is easier to add some missing variable when "
"needed than to remove a likely unused variable later."
msgstr ""

#: ../../scenarios/web.rst:309
msgid ""
"Many template engines allow for complex statements or assignments in the "
"template itself, and many allow some Python code to be evaluated in the "
"templates. This convenience can lead to uncontrolled increase in "
"complexity, and often make it harder to find bugs."
msgstr ""

#: ../../scenarios/web.rst:315
msgid ""
"It is often necessary to mix JavaScript templates with HTML templates. A "
"sane approach to this design is to isolate the parts where the HTML "
"template passes some variable content to the JavaScript code."
msgstr ""

#: ../../scenarios/web.rst:323
msgid "Jinja2"
msgstr ""

#: ../../scenarios/web.rst:324
msgid ""
"`Jinja2 <http://jinja.pocoo.org/>`_ is a very well-regarded template "
"engine."
msgstr ""

#: ../../scenarios/web.rst:326
msgid ""
"It uses a text-based template language and can thus be used to generate "
"any type of markup, not just HTML. It allows customization of filters, "
"tags, tests, and globals. It features many improvements over Django's "
"templating system."
msgstr ""

#: ../../scenarios/web.rst:330
msgid "Here some important HTML tags in Jinja2:"
msgstr ""

#: ../../scenarios/web.rst:350
msgid ""
"The next listings are an example of a web site in combination with the "
"Tornado web server. Tornado is not very complicated to use."
msgstr ""

#: ../../scenarios/web.rst:391
msgid ""
"The :file:`base.html` file can be used as base for all site pages which "
"are for example implemented in the content block."
msgstr ""

#: ../../scenarios/web.rst:416
msgid ""
"The next listing is our site page (:file:`site.html`) loaded in the "
"Python app which extends :file:`base.html`. The content block is "
"automatically set into the corresponding block in the :file:`base.html` "
"page."
msgstr ""

#: ../../scenarios/web.rst:438
msgid ""
"Jinja2 is the recommended templating library for new Python web "
"applications."
msgstr ""

#: ../../scenarios/web.rst:441
msgid "Chameleon"
msgstr ""

#: ../../scenarios/web.rst:443
msgid ""
"`Chameleon <https://chameleon.readthedocs.io/>`_ Page Templates are an "
"HTML/XML template engine implementation of the `Template Attribute "
"Language (TAL) "
"<https://en.wikipedia.org/wiki/Template_Attribute_Language>`_, `TAL "
"Expression Syntax (TALES) "
"<https://chameleon.readthedocs.io/en/latest/reference.html#expressions-"
"tales>`_, and `Macro Expansion TAL (Metal) "
"<https://chameleon.readthedocs.io/en/latest/reference.html#macros-"
"metal>`_ syntaxes."
msgstr ""

#: ../../scenarios/web.rst:448
msgid ""
"Chameleon is available for Python 2.5 and up (including 3.x and PyPy), "
"and is commonly used by the `Pyramid Framework "
"<https://trypyramid.com/>`_."
msgstr ""

#: ../../scenarios/web.rst:451
msgid ""
"Page Templates add within your document structure special element "
"attributes and text markup. Using a set of simple language constructs, "
"you control the document flow, element repetition, text replacement, and "
"translation. Because of the attribute-based syntax, unrendered page "
"templates are valid HTML and can be viewed in a browser and even edited "
"in WYSIWYG editors. This can make round-trip collaboration with designers"
" and prototyping with static files in a browser easier."
msgstr ""

#: ../../scenarios/web.rst:459
msgid "The basic TAL language is simple enough to grasp from an example:"
msgstr ""

#: ../../scenarios/web.rst:477
msgid ""
"The `<span tal:replace=\"expression\" />` pattern for text insertion is "
"common enough that if you do not require strict validity in your "
"unrendered templates, you can replace it with a more terse and readable "
"syntax that uses the pattern `${expression}`, as follows:"
msgstr ""

#: ../../scenarios/web.rst:498
msgid ""
"But keep in mind that the full `<span tal:replace=\"expression\">Default "
"Text</span>` syntax also allows for default content in the unrendered "
"template."
msgstr ""

#: ../../scenarios/web.rst:501
msgid "Being from the Pyramid world, Chameleon is not widely used."
msgstr ""

#: ../../scenarios/web.rst:504
msgid "Mako"
msgstr ""

#: ../../scenarios/web.rst:506
msgid ""
"`Mako <http://www.makotemplates.org/>`_ is a template language that "
"compiles to Python for maximum performance. Its syntax and API are "
"borrowed from the best parts of other templating languages like Django "
"and Jinja2 templates. It is the default template language included with "
"the `Pylons and Pyramid <http://www.pylonsproject.org/>`_ web frameworks."
msgstr ""

#: ../../scenarios/web.rst:512
msgid "An example template in Mako looks like:"
msgstr ""

#: ../../scenarios/web.rst:534
msgid "To render a very basic template, you can do the following:"
msgstr ""

#: ../../scenarios/web.rst:541
msgid "Mako is well respected within the Python web community."
msgstr ""

#: ../../scenarios/web.rst:544
msgid "References"
msgstr ""

#: ../../scenarios/web.rst:545
msgid ""
"`Benchmark of Python WSGI Servers <http://nichol.as/benchmark-of-python-"
"web-servers>`_"
msgstr ""

#: ../../scenarios/xml.rst:4
msgid "XML parsing"
msgstr ""

#: ../../scenarios/xml.rst:11
msgid "untangle"
msgstr ""

#: ../../scenarios/xml.rst:13
msgid ""
"`untangle <https://github.com/stchris/untangle>`_ is a simple library "
"which takes an XML document and returns a Python object which mirrors the"
" nodes and attributes in its structure."
msgstr ""

#: ../../scenarios/xml.rst:17
msgid "For example, an XML file like this:"
msgstr ""

#: ../../scenarios/xml.rst:26
msgid "can be loaded like this:"
msgstr ""

#: ../../scenarios/xml.rst:33
msgid "and then you can get the child element's name attribute like this:"
msgstr ""

#: ../../scenarios/xml.rst:39
msgid "untangle also supports loading XML from a string or a URL."
msgstr ""

#: ../../scenarios/xml.rst:44
msgid "xmltodict"
msgstr ""

#: ../../scenarios/xml.rst:46
msgid ""
"`xmltodict <https://github.com/martinblech/xmltodict>`_ is another simple"
" library that aims at making XML feel like working with JSON."
msgstr ""

#: ../../scenarios/xml.rst:49
msgid "An XML file like this:"
msgstr ""

#: ../../scenarios/xml.rst:63
msgid "can be loaded into a Python dict like this:"
msgstr ""

#: ../../scenarios/xml.rst:72
msgid "and then you can access elements, attributes, and values like this:"
msgstr ""

#: ../../scenarios/xml.rst:81
msgid ""
"xmltodict also lets you roundtrip back to XML with the unparse function, "
"has a streaming mode suitable for handling files that don't fit in "
"memory, and supports XML namespaces."
msgstr ""

